name: create AKS cluster

on:
  workflow_dispatch:

jobs:
  create_aks:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and Create Role Assignment
        id: create_role_assignment
        run: |
          existing_role=$(az role assignment list --assignee ${{ secrets.AZURE_PRINCIPAL_ID }} --role "Contributor" --scope "/subscriptions/${{ secrets.SUB_ID }}/resourceGroups/datamonster" --query "[?principalId=='${{ secrets.AZURE_PRINCIPAL_ID }}'].id" -o tsv)
          if [ -z "$existing_role" ]; then
            az role assignment create --assignee ${{ secrets.AZURE_PRINCIPAL_ID }} --role "Contributor" --scope "/subscriptions/${{ secrets.SUB_ID }}/resourceGroups/datamonster"
          else
            echo "Role assignment already exists."
          fi

      - name: Deploy AKS cluster using Bicep
        run: |
          az stack group create \
            --name dm-k8s \
            --resource-group datamonster \
            --action-on-unmanage deleteResources \
            --deny-settings-mode None \
            --template-file k8s/k8s.bicep \
            --parameters location='westus3' \
              aksClusterName='dm-cluster' \
              clientId='${{ secrets.AZURE_CLIENT_ID }}' \
              clientKey='${{ secrets.AZURE_CLIENT_SECRET }}' \

      - name: Retrieve SSL Certificate from Key Vault
        id: get_certificate
        run: |
          az keyvault secret show --vault-name ${{ secrets.KEYVAULT }} --name ${{ secrets.CERT_NAME }} --query value -o tsv > /tmp/cert.pfx

      - name: Configure SSL Certificate in Azure Application Gateway
        run: |
          az network application-gateway ssl-cert create \
            --resource-group datamonster \
            --gateway-name dm-app-gateway \
            --name dm-ssl-cert \
            --cert-file /tmp/cert.pfx \
            --cert-password ${{ secrets.CERT_PASS }}

      - name: Set up Kubernetes context
        run: |
          az aks get-credentials --resource-group datamonster --name dm-cluster --overwrite-existing

      - name: Create GHCR secret in AKS
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_PAT }} \
            --docker-email=${{ secrets.GHCR_EMAIL }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Kubernetes manifests
        run: |
          kubectl apply -f k8s/k8s-deployment.yaml

      - name: Verify Deployments
        run: |
          kubectl get deployments
          kubectl get services
