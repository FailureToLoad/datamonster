/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
};

/**
 * CreateSettlementInput is used for create Settlement object.
 * Input was generated by ent.
 */
export type CreateSettlementInput = {
  collectivecognition?: InputMaybe<Scalars['Int']['input']>;
  createSurvivors?: InputMaybe<Array<CreateSurvivorInput>>;
  currentyear?: InputMaybe<Scalars['Int']['input']>;
  departingsurvival?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  owner: Scalars['String']['input'];
  populationIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  survivallimit?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * CreateSurvivorInput is used for create Survivor object.
 * Input was generated by ent.
 */
export type CreateSurvivorInput = {
  accuracy?: InputMaybe<Scalars['Int']['input']>;
  born?: InputMaybe<Scalars['Int']['input']>;
  courage?: InputMaybe<Scalars['Int']['input']>;
  evasion?: InputMaybe<Scalars['Int']['input']>;
  gender?: InputMaybe<SurvivorGender>;
  huntxp?: InputMaybe<Scalars['Int']['input']>;
  insanity?: InputMaybe<Scalars['Int']['input']>;
  luck?: InputMaybe<Scalars['Int']['input']>;
  lumi?: InputMaybe<Scalars['Int']['input']>;
  movement?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  settlementID?: InputMaybe<Scalars['ID']['input']>;
  speed?: InputMaybe<Scalars['Int']['input']>;
  strength?: InputMaybe<Scalars['Int']['input']>;
  survival?: InputMaybe<Scalars['Int']['input']>;
  systemicpressure?: InputMaybe<Scalars['Int']['input']>;
  torment?: InputMaybe<Scalars['Int']['input']>;
  understanding?: InputMaybe<Scalars['Int']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createSettlement?: Maybe<Settlement>;
  createSurvivor?: Maybe<Survivor>;
  updateSettlement?: Maybe<Settlement>;
  updateSurvivor?: Maybe<Survivor>;
};


export type MutationCreateSettlementArgs = {
  input: CreateSettlementInput;
};


export type MutationCreateSurvivorArgs = {
  input: CreateSurvivorInput;
};


export type MutationUpdateSettlementArgs = {
  id: Scalars['ID']['input'];
  input: UpdateSettlementInput;
};


export type MutationUpdateSurvivorArgs = {
  id: Scalars['ID']['input'];
  input: UpdateSurvivorInput;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Query = {
  __typename?: 'Query';
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  settlement?: Maybe<Settlement>;
  settlements?: Maybe<Array<Maybe<Settlement>>>;
  survivors?: Maybe<Array<Survivor>>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QuerySettlementArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySurvivorsArgs = {
  filter?: InputMaybe<SurvivorWhereInput>;
  order?: InputMaybe<SurvivorOrder>;
};

export type Settlement = Node & {
  __typename?: 'Settlement';
  collectivecognition: Scalars['Int']['output'];
  currentyear: Scalars['Int']['output'];
  departingsurvival: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  owner: Scalars['String']['output'];
  population?: Maybe<Array<Survivor>>;
  survivallimit: Scalars['Int']['output'];
};

/** Ordering options for Settlement connections */
export type SettlementOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Settlements. */
  field: SettlementOrderField;
};

/** Properties by which Settlement connections can be ordered. */
export enum SettlementOrderField {
  CollectiveCognition = 'COLLECTIVE_COGNITION',
  CurrentYear = 'CURRENT_YEAR',
  DepartingSurvival = 'DEPARTING_SURVIVAL',
  Name = 'NAME',
  Owner = 'OWNER',
  SurvivalLimit = 'SURVIVAL_LIMIT'
}

/**
 * SettlementWhereInput is used for filtering Settlement objects.
 * Input was generated by ent.
 */
export type SettlementWhereInput = {
  and?: InputMaybe<Array<SettlementWhereInput>>;
  /** collectiveCognition field predicates */
  collectivecognition?: InputMaybe<Scalars['Int']['input']>;
  collectivecognitionGT?: InputMaybe<Scalars['Int']['input']>;
  collectivecognitionGTE?: InputMaybe<Scalars['Int']['input']>;
  collectivecognitionIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  collectivecognitionLT?: InputMaybe<Scalars['Int']['input']>;
  collectivecognitionLTE?: InputMaybe<Scalars['Int']['input']>;
  collectivecognitionNEQ?: InputMaybe<Scalars['Int']['input']>;
  collectivecognitionNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** currentYear field predicates */
  currentyear?: InputMaybe<Scalars['Int']['input']>;
  currentyearGT?: InputMaybe<Scalars['Int']['input']>;
  currentyearGTE?: InputMaybe<Scalars['Int']['input']>;
  currentyearIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  currentyearLT?: InputMaybe<Scalars['Int']['input']>;
  currentyearLTE?: InputMaybe<Scalars['Int']['input']>;
  currentyearNEQ?: InputMaybe<Scalars['Int']['input']>;
  currentyearNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** departingSurvival field predicates */
  departingsurvival?: InputMaybe<Scalars['Int']['input']>;
  departingsurvivalGT?: InputMaybe<Scalars['Int']['input']>;
  departingsurvivalGTE?: InputMaybe<Scalars['Int']['input']>;
  departingsurvivalIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  departingsurvivalLT?: InputMaybe<Scalars['Int']['input']>;
  departingsurvivalLTE?: InputMaybe<Scalars['Int']['input']>;
  departingsurvivalNEQ?: InputMaybe<Scalars['Int']['input']>;
  departingsurvivalNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** population edge predicates */
  hasPopulation?: InputMaybe<Scalars['Boolean']['input']>;
  hasPopulationWith?: InputMaybe<Array<SurvivorWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<SettlementWhereInput>;
  or?: InputMaybe<Array<SettlementWhereInput>>;
  /** owner field predicates */
  owner?: InputMaybe<Scalars['String']['input']>;
  ownerContains?: InputMaybe<Scalars['String']['input']>;
  ownerContainsFold?: InputMaybe<Scalars['String']['input']>;
  ownerEqualFold?: InputMaybe<Scalars['String']['input']>;
  ownerGT?: InputMaybe<Scalars['String']['input']>;
  ownerGTE?: InputMaybe<Scalars['String']['input']>;
  ownerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  ownerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  ownerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerLT?: InputMaybe<Scalars['String']['input']>;
  ownerLTE?: InputMaybe<Scalars['String']['input']>;
  ownerNEQ?: InputMaybe<Scalars['String']['input']>;
  ownerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** survivalLimit field predicates */
  survivallimit?: InputMaybe<Scalars['Int']['input']>;
  survivallimitGT?: InputMaybe<Scalars['Int']['input']>;
  survivallimitGTE?: InputMaybe<Scalars['Int']['input']>;
  survivallimitIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  survivallimitLT?: InputMaybe<Scalars['Int']['input']>;
  survivallimitLTE?: InputMaybe<Scalars['Int']['input']>;
  survivallimitNEQ?: InputMaybe<Scalars['Int']['input']>;
  survivallimitNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type Survivor = Node & {
  __typename?: 'Survivor';
  accuracy: Scalars['Int']['output'];
  born: Scalars['Int']['output'];
  courage: Scalars['Int']['output'];
  evasion: Scalars['Int']['output'];
  gender: SurvivorGender;
  huntxp: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  insanity: Scalars['Int']['output'];
  luck: Scalars['Int']['output'];
  lumi: Scalars['Int']['output'];
  movement: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  settlement?: Maybe<Settlement>;
  settlementID?: Maybe<Scalars['ID']['output']>;
  speed: Scalars['Int']['output'];
  strength: Scalars['Int']['output'];
  survival: Scalars['Int']['output'];
  systemicpressure: Scalars['Int']['output'];
  torment: Scalars['Int']['output'];
  understanding: Scalars['Int']['output'];
};

/** SurvivorGender is enum for the field gender */
export enum SurvivorGender {
  F = 'F',
  M = 'M'
}

/** Ordering options for Survivor connections */
export type SurvivorOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Survivors. */
  field: SurvivorOrderField;
};

/** Properties by which Survivor connections can be ordered. */
export enum SurvivorOrderField {
  Accuracy = 'ACCURACY',
  Born = 'BORN',
  Currency = 'CURRENCY',
  Evasion = 'EVASION',
  Gender = 'GENDER',
  Huntxp = 'HUNTXP',
  Insanity = 'INSANITY',
  Luck = 'LUCK',
  Lumi = 'LUMI',
  Movement = 'MOVEMENT',
  Name = 'NAME',
  Settlementid = 'SETTLEMENTID',
  Speed = 'SPEED',
  Strength = 'STRENGTH',
  Survval = 'SURVVAL',
  Systemicpressure = 'SYSTEMICPRESSURE',
  Torment = 'TORMENT',
  Understanding = 'UNDERSTANDING'
}

/**
 * SurvivorWhereInput is used for filtering Survivor objects.
 * Input was generated by ent.
 */
export type SurvivorWhereInput = {
  /** accuracy field predicates */
  accuracy?: InputMaybe<Scalars['Int']['input']>;
  accuracyGT?: InputMaybe<Scalars['Int']['input']>;
  accuracyGTE?: InputMaybe<Scalars['Int']['input']>;
  accuracyIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  accuracyLT?: InputMaybe<Scalars['Int']['input']>;
  accuracyLTE?: InputMaybe<Scalars['Int']['input']>;
  accuracyNEQ?: InputMaybe<Scalars['Int']['input']>;
  accuracyNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<SurvivorWhereInput>>;
  /** born field predicates */
  born?: InputMaybe<Scalars['Int']['input']>;
  bornGT?: InputMaybe<Scalars['Int']['input']>;
  bornGTE?: InputMaybe<Scalars['Int']['input']>;
  bornIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  bornLT?: InputMaybe<Scalars['Int']['input']>;
  bornLTE?: InputMaybe<Scalars['Int']['input']>;
  bornNEQ?: InputMaybe<Scalars['Int']['input']>;
  bornNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** courage field predicates */
  courage?: InputMaybe<Scalars['Int']['input']>;
  courageGT?: InputMaybe<Scalars['Int']['input']>;
  courageGTE?: InputMaybe<Scalars['Int']['input']>;
  courageIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  courageLT?: InputMaybe<Scalars['Int']['input']>;
  courageLTE?: InputMaybe<Scalars['Int']['input']>;
  courageNEQ?: InputMaybe<Scalars['Int']['input']>;
  courageNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** evasion field predicates */
  evasion?: InputMaybe<Scalars['Int']['input']>;
  evasionGT?: InputMaybe<Scalars['Int']['input']>;
  evasionGTE?: InputMaybe<Scalars['Int']['input']>;
  evasionIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  evasionLT?: InputMaybe<Scalars['Int']['input']>;
  evasionLTE?: InputMaybe<Scalars['Int']['input']>;
  evasionNEQ?: InputMaybe<Scalars['Int']['input']>;
  evasionNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** gender field predicates */
  gender?: InputMaybe<SurvivorGender>;
  genderIn?: InputMaybe<Array<SurvivorGender>>;
  genderNEQ?: InputMaybe<SurvivorGender>;
  genderNotIn?: InputMaybe<Array<SurvivorGender>>;
  /** settlement edge predicates */
  hasSettlement?: InputMaybe<Scalars['Boolean']['input']>;
  hasSettlementWith?: InputMaybe<Array<SettlementWhereInput>>;
  /** huntxp field predicates */
  huntxp?: InputMaybe<Scalars['Int']['input']>;
  huntxpGT?: InputMaybe<Scalars['Int']['input']>;
  huntxpGTE?: InputMaybe<Scalars['Int']['input']>;
  huntxpIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  huntxpLT?: InputMaybe<Scalars['Int']['input']>;
  huntxpLTE?: InputMaybe<Scalars['Int']['input']>;
  huntxpNEQ?: InputMaybe<Scalars['Int']['input']>;
  huntxpNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** insanity field predicates */
  insanity?: InputMaybe<Scalars['Int']['input']>;
  insanityGT?: InputMaybe<Scalars['Int']['input']>;
  insanityGTE?: InputMaybe<Scalars['Int']['input']>;
  insanityIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  insanityLT?: InputMaybe<Scalars['Int']['input']>;
  insanityLTE?: InputMaybe<Scalars['Int']['input']>;
  insanityNEQ?: InputMaybe<Scalars['Int']['input']>;
  insanityNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** luck field predicates */
  luck?: InputMaybe<Scalars['Int']['input']>;
  luckGT?: InputMaybe<Scalars['Int']['input']>;
  luckGTE?: InputMaybe<Scalars['Int']['input']>;
  luckIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  luckLT?: InputMaybe<Scalars['Int']['input']>;
  luckLTE?: InputMaybe<Scalars['Int']['input']>;
  luckNEQ?: InputMaybe<Scalars['Int']['input']>;
  luckNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** lumi field predicates */
  lumi?: InputMaybe<Scalars['Int']['input']>;
  lumiGT?: InputMaybe<Scalars['Int']['input']>;
  lumiGTE?: InputMaybe<Scalars['Int']['input']>;
  lumiIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  lumiLT?: InputMaybe<Scalars['Int']['input']>;
  lumiLTE?: InputMaybe<Scalars['Int']['input']>;
  lumiNEQ?: InputMaybe<Scalars['Int']['input']>;
  lumiNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** movement field predicates */
  movement?: InputMaybe<Scalars['Int']['input']>;
  movementGT?: InputMaybe<Scalars['Int']['input']>;
  movementGTE?: InputMaybe<Scalars['Int']['input']>;
  movementIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  movementLT?: InputMaybe<Scalars['Int']['input']>;
  movementLTE?: InputMaybe<Scalars['Int']['input']>;
  movementNEQ?: InputMaybe<Scalars['Int']['input']>;
  movementNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<SurvivorWhereInput>;
  or?: InputMaybe<Array<SurvivorWhereInput>>;
  /** settlement_id field predicates */
  settlementID?: InputMaybe<Scalars['ID']['input']>;
  settlementIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  settlementIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  settlementIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  settlementIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  settlementIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** speed field predicates */
  speed?: InputMaybe<Scalars['Int']['input']>;
  speedGT?: InputMaybe<Scalars['Int']['input']>;
  speedGTE?: InputMaybe<Scalars['Int']['input']>;
  speedIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  speedLT?: InputMaybe<Scalars['Int']['input']>;
  speedLTE?: InputMaybe<Scalars['Int']['input']>;
  speedNEQ?: InputMaybe<Scalars['Int']['input']>;
  speedNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** strength field predicates */
  strength?: InputMaybe<Scalars['Int']['input']>;
  strengthGT?: InputMaybe<Scalars['Int']['input']>;
  strengthGTE?: InputMaybe<Scalars['Int']['input']>;
  strengthIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  strengthLT?: InputMaybe<Scalars['Int']['input']>;
  strengthLTE?: InputMaybe<Scalars['Int']['input']>;
  strengthNEQ?: InputMaybe<Scalars['Int']['input']>;
  strengthNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** survival field predicates */
  survival?: InputMaybe<Scalars['Int']['input']>;
  survivalGT?: InputMaybe<Scalars['Int']['input']>;
  survivalGTE?: InputMaybe<Scalars['Int']['input']>;
  survivalIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  survivalLT?: InputMaybe<Scalars['Int']['input']>;
  survivalLTE?: InputMaybe<Scalars['Int']['input']>;
  survivalNEQ?: InputMaybe<Scalars['Int']['input']>;
  survivalNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** systemicpressure field predicates */
  systemicpressure?: InputMaybe<Scalars['Int']['input']>;
  systemicpressureGT?: InputMaybe<Scalars['Int']['input']>;
  systemicpressureGTE?: InputMaybe<Scalars['Int']['input']>;
  systemicpressureIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  systemicpressureLT?: InputMaybe<Scalars['Int']['input']>;
  systemicpressureLTE?: InputMaybe<Scalars['Int']['input']>;
  systemicpressureNEQ?: InputMaybe<Scalars['Int']['input']>;
  systemicpressureNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** torment field predicates */
  torment?: InputMaybe<Scalars['Int']['input']>;
  tormentGT?: InputMaybe<Scalars['Int']['input']>;
  tormentGTE?: InputMaybe<Scalars['Int']['input']>;
  tormentIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  tormentLT?: InputMaybe<Scalars['Int']['input']>;
  tormentLTE?: InputMaybe<Scalars['Int']['input']>;
  tormentNEQ?: InputMaybe<Scalars['Int']['input']>;
  tormentNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** understanding field predicates */
  understanding?: InputMaybe<Scalars['Int']['input']>;
  understandingGT?: InputMaybe<Scalars['Int']['input']>;
  understandingGTE?: InputMaybe<Scalars['Int']['input']>;
  understandingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  understandingLT?: InputMaybe<Scalars['Int']['input']>;
  understandingLTE?: InputMaybe<Scalars['Int']['input']>;
  understandingNEQ?: InputMaybe<Scalars['Int']['input']>;
  understandingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

/**
 * UpdateSettlementInput is used for update Settlement object.
 * Input was generated by ent.
 */
export type UpdateSettlementInput = {
  addPopulationIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addSurvivors?: InputMaybe<Array<CreateSurvivorInput>>;
  clearPopulation?: InputMaybe<Scalars['Boolean']['input']>;
  collectivecognition?: InputMaybe<Scalars['Int']['input']>;
  currentyear?: InputMaybe<Scalars['Int']['input']>;
  departingsurvival?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  owner?: InputMaybe<Scalars['String']['input']>;
  removePopulationIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  survivallimit?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * UpdateSurvivorInput is used for update Survivor object.
 * Input was generated by ent.
 */
export type UpdateSurvivorInput = {
  accuracy?: InputMaybe<Scalars['Int']['input']>;
  born?: InputMaybe<Scalars['Int']['input']>;
  clearSettlement?: InputMaybe<Scalars['Boolean']['input']>;
  courage?: InputMaybe<Scalars['Int']['input']>;
  evasion?: InputMaybe<Scalars['Int']['input']>;
  gender?: InputMaybe<SurvivorGender>;
  huntxp?: InputMaybe<Scalars['Int']['input']>;
  insanity?: InputMaybe<Scalars['Int']['input']>;
  luck?: InputMaybe<Scalars['Int']['input']>;
  lumi?: InputMaybe<Scalars['Int']['input']>;
  movement?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  settlementID?: InputMaybe<Scalars['ID']['input']>;
  speed?: InputMaybe<Scalars['Int']['input']>;
  strength?: InputMaybe<Scalars['Int']['input']>;
  survival?: InputMaybe<Scalars['Int']['input']>;
  systemicpressure?: InputMaybe<Scalars['Int']['input']>;
  torment?: InputMaybe<Scalars['Int']['input']>;
  understanding?: InputMaybe<Scalars['Int']['input']>;
};

export type CreateSurvivorMutationVariables = Exact<{
  input: CreateSurvivorInput;
}>;


export type CreateSurvivorMutation = { __typename?: 'Mutation', createSurvivor?: { __typename?: 'Survivor', id: string, name: string } | null };

export type UpdateSurvivorMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: UpdateSurvivorInput;
}>;


export type UpdateSurvivorMutation = { __typename?: 'Mutation', updateSurvivor?: { __typename?: 'Survivor', id: string, name: string } | null };

export type GetSurvivorsQueryVariables = Exact<{
  settlementId: Scalars['ID']['input'];
}>;


export type GetSurvivorsQuery = { __typename?: 'Query', survivors?: Array<{ __typename?: 'Survivor', id: string, accuracy: number, born: number, courage: number, evasion: number, gender: SurvivorGender, huntxp: number, insanity: number, luck: number, lumi: number, movement: number, name: string, speed: number, strength: number, survival: number, systemicpressure: number, torment: number, understanding: number }> | null };

export type CreateSettlementMutationVariables = Exact<{
  input: CreateSettlementInput;
}>;


export type CreateSettlementMutation = { __typename?: 'Mutation', createSettlement?: { __typename?: 'Settlement', id: string, name: string, owner: string } | null };

export type GetSettlementsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSettlementsQuery = { __typename?: 'Query', settlements?: Array<{ __typename?: 'Settlement', id: string, name: string } | null> | null };


export const CreateSurvivorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSurvivor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateSurvivorInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createSurvivor"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<CreateSurvivorMutation, CreateSurvivorMutationVariables>;
export const UpdateSurvivorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSurvivor"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UpdateSurvivorInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateSurvivor"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<UpdateSurvivorMutation, UpdateSurvivorMutationVariables>;
export const GetSurvivorsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSurvivors"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"settlementId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"survivors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"settlementID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"settlementId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"accuracy"}},{"kind":"Field","name":{"kind":"Name","value":"born"}},{"kind":"Field","name":{"kind":"Name","value":"courage"}},{"kind":"Field","name":{"kind":"Name","value":"evasion"}},{"kind":"Field","name":{"kind":"Name","value":"gender"}},{"kind":"Field","name":{"kind":"Name","value":"huntxp"}},{"kind":"Field","name":{"kind":"Name","value":"insanity"}},{"kind":"Field","name":{"kind":"Name","value":"luck"}},{"kind":"Field","name":{"kind":"Name","value":"lumi"}},{"kind":"Field","name":{"kind":"Name","value":"movement"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"speed"}},{"kind":"Field","name":{"kind":"Name","value":"strength"}},{"kind":"Field","name":{"kind":"Name","value":"survival"}},{"kind":"Field","name":{"kind":"Name","value":"systemicpressure"}},{"kind":"Field","name":{"kind":"Name","value":"torment"}},{"kind":"Field","name":{"kind":"Name","value":"understanding"}}]}}]}}]} as unknown as DocumentNode<GetSurvivorsQuery, GetSurvivorsQueryVariables>;
export const CreateSettlementDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSettlement"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateSettlementInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createSettlement"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"owner"}}]}}]}}]} as unknown as DocumentNode<CreateSettlementMutation, CreateSettlementMutationVariables>;
export const GetSettlementsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSettlements"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"settlements"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetSettlementsQuery, GetSettlementsQueryVariables>;