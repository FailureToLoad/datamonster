server {
    listen 80;
    server_name localhost;

    # Serve frontend assets
    location / {
        root /var/www/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests to Azure API App
    location /graphql {
        proxy_pass https://datamonster-api.azurewebsites.net/graphql;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Additional logging for debugging
        access_log /dev/stdout main;
        error_log /dev/stderr debug;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

            # Log request body
        set $request_body_file /tmp/request_body;
        client_body_in_file_only on;
        client_body_temp_path /tmp;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Request-Body-File $request_body_file;

        # Log response body
        body_filter_by_lua_block {
            local resp_body = ngx.arg[1]
            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
            if ngx.arg[2] then
                ngx.log(ngx.ERR, "Response Body: ", ngx.ctx.buffered)
            end
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK";
    }

    # Additional security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

    # Logging for the server block
    access_log /dev/stdout main;
    error_log /dev/stderr warn;
}