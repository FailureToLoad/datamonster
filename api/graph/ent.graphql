directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateSettlementInput is used for create Settlement object.
Input was generated by ent.
"""
input CreateSettlementInput {
  owner: String!
  name: String!
  survivallimit: Int
  departingsurvival: Int
  collectivecognition: Int
  currentyear: Int
  populationIDs: [ID!]
}
"""
CreateSurvivorInput is used for create Survivor object.
Input was generated by ent.
"""
input CreateSurvivorInput {
  name: String!
  born: Int
  gender: SurvivorGender
  huntxp: Int
  survival: Int
  movement: Int
  accuracy: Int
  strength: Int
  evasion: Int
  luck: Int
  speed: Int
  systemicpressure: Int
  torment: Int
  insanity: Int
  lumi: Int
  courage: Int
  understanding: Int
  status: SurvivorStatus
  statusChangeYear: Int
  settlementID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/failuretoload/datamonster/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
type Settlement implements Node {
  id: ID!
  owner: String!
  name: String!
  survivallimit: Int! @goField(name: "SurvivalLimit", forceResolver: false)
  departingsurvival: Int! @goField(name: "DepartingSurvival", forceResolver: false)
  collectivecognition: Int! @goField(name: "CollectiveCognition", forceResolver: false)
  currentyear: Int! @goField(name: "CurrentYear", forceResolver: false)
  population: [Survivor!]
}
"""
Ordering options for Settlement connections
"""
input SettlementOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Settlements.
  """
  field: SettlementOrderField!
}
"""
Properties by which Settlement connections can be ordered.
"""
enum SettlementOrderField {
  OWNER
  NAME
  SURVIVAL_LIMIT
  DEPARTING_SURVIVAL
  COLLECTIVE_COGNITION
  CURRENT_YEAR
}
"""
SettlementWhereInput is used for filtering Settlement objects.
Input was generated by ent.
"""
input SettlementWhereInput {
  not: SettlementWhereInput
  and: [SettlementWhereInput!]
  or: [SettlementWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  owner field predicates
  """
  owner: String
  ownerNEQ: String
  ownerIn: [String!]
  ownerNotIn: [String!]
  ownerGT: String
  ownerGTE: String
  ownerLT: String
  ownerLTE: String
  ownerContains: String
  ownerHasPrefix: String
  ownerHasSuffix: String
  ownerEqualFold: String
  ownerContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  survivalLimit field predicates
  """
  survivallimit: Int
  survivallimitNEQ: Int
  survivallimitIn: [Int!]
  survivallimitNotIn: [Int!]
  survivallimitGT: Int
  survivallimitGTE: Int
  survivallimitLT: Int
  survivallimitLTE: Int
  """
  departingSurvival field predicates
  """
  departingsurvival: Int
  departingsurvivalNEQ: Int
  departingsurvivalIn: [Int!]
  departingsurvivalNotIn: [Int!]
  departingsurvivalGT: Int
  departingsurvivalGTE: Int
  departingsurvivalLT: Int
  departingsurvivalLTE: Int
  """
  collectiveCognition field predicates
  """
  collectivecognition: Int
  collectivecognitionNEQ: Int
  collectivecognitionIn: [Int!]
  collectivecognitionNotIn: [Int!]
  collectivecognitionGT: Int
  collectivecognitionGTE: Int
  collectivecognitionLT: Int
  collectivecognitionLTE: Int
  """
  currentYear field predicates
  """
  currentyear: Int
  currentyearNEQ: Int
  currentyearIn: [Int!]
  currentyearNotIn: [Int!]
  currentyearGT: Int
  currentyearGTE: Int
  currentyearLT: Int
  currentyearLTE: Int
  """
  population edge predicates
  """
  hasPopulation: Boolean
  hasPopulationWith: [SurvivorWhereInput!]
}
type Survivor implements Node {
  id: ID!
  name: String!
  born: Int!
  gender: SurvivorGender!
  huntxp: Int!
  survival: Int!
  movement: Int!
  accuracy: Int!
  strength: Int!
  evasion: Int!
  luck: Int!
  speed: Int!
  systemicpressure: Int!
  torment: Int!
  insanity: Int!
  lumi: Int!
  courage: Int!
  understanding: Int!
  status: SurvivorStatus!
  statusChangeYear: Int!
  settlementID: ID
  settlement: Settlement
}
"""
SurvivorGender is enum for the field gender
"""
enum SurvivorGender @goModel(model: "github.com/failuretoload/datamonster/ent/survivor.Gender") {
  M
  F
}
"""
Ordering options for Survivor connections
"""
input SurvivorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Survivors.
  """
  field: SurvivorOrderField!
}
"""
Properties by which Survivor connections can be ordered.
"""
enum SurvivorOrderField {
  NAME
  BORN
  GENDER
  HUNTXP
  SURVVAL
  MOVEMENT
  ACCURACY
  STRENGTH
  EVASION
  LUCK
  SPEED
  SYSTEMICPRESSURE
  TORMENT
  INSANITY
  LUMI
  CURRENCY
  UNDERSTANDING
  STATUS
  STATUS_CHANGE_YEAR
  SETTLEMENTID
}
"""
SurvivorStatus is enum for the field status
"""
enum SurvivorStatus @goModel(model: "github.com/failuretoload/datamonster/ent/survivor.Status") {
  alive
  dead
  ceased_to_exist
  retired
  skip_hunt
}
"""
SurvivorWhereInput is used for filtering Survivor objects.
Input was generated by ent.
"""
input SurvivorWhereInput {
  not: SurvivorWhereInput
  and: [SurvivorWhereInput!]
  or: [SurvivorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  born field predicates
  """
  born: Int
  bornNEQ: Int
  bornIn: [Int!]
  bornNotIn: [Int!]
  bornGT: Int
  bornGTE: Int
  bornLT: Int
  bornLTE: Int
  """
  gender field predicates
  """
  gender: SurvivorGender
  genderNEQ: SurvivorGender
  genderIn: [SurvivorGender!]
  genderNotIn: [SurvivorGender!]
  """
  huntxp field predicates
  """
  huntxp: Int
  huntxpNEQ: Int
  huntxpIn: [Int!]
  huntxpNotIn: [Int!]
  huntxpGT: Int
  huntxpGTE: Int
  huntxpLT: Int
  huntxpLTE: Int
  """
  survival field predicates
  """
  survival: Int
  survivalNEQ: Int
  survivalIn: [Int!]
  survivalNotIn: [Int!]
  survivalGT: Int
  survivalGTE: Int
  survivalLT: Int
  survivalLTE: Int
  """
  movement field predicates
  """
  movement: Int
  movementNEQ: Int
  movementIn: [Int!]
  movementNotIn: [Int!]
  movementGT: Int
  movementGTE: Int
  movementLT: Int
  movementLTE: Int
  """
  accuracy field predicates
  """
  accuracy: Int
  accuracyNEQ: Int
  accuracyIn: [Int!]
  accuracyNotIn: [Int!]
  accuracyGT: Int
  accuracyGTE: Int
  accuracyLT: Int
  accuracyLTE: Int
  """
  strength field predicates
  """
  strength: Int
  strengthNEQ: Int
  strengthIn: [Int!]
  strengthNotIn: [Int!]
  strengthGT: Int
  strengthGTE: Int
  strengthLT: Int
  strengthLTE: Int
  """
  evasion field predicates
  """
  evasion: Int
  evasionNEQ: Int
  evasionIn: [Int!]
  evasionNotIn: [Int!]
  evasionGT: Int
  evasionGTE: Int
  evasionLT: Int
  evasionLTE: Int
  """
  luck field predicates
  """
  luck: Int
  luckNEQ: Int
  luckIn: [Int!]
  luckNotIn: [Int!]
  luckGT: Int
  luckGTE: Int
  luckLT: Int
  luckLTE: Int
  """
  speed field predicates
  """
  speed: Int
  speedNEQ: Int
  speedIn: [Int!]
  speedNotIn: [Int!]
  speedGT: Int
  speedGTE: Int
  speedLT: Int
  speedLTE: Int
  """
  systemicpressure field predicates
  """
  systemicpressure: Int
  systemicpressureNEQ: Int
  systemicpressureIn: [Int!]
  systemicpressureNotIn: [Int!]
  systemicpressureGT: Int
  systemicpressureGTE: Int
  systemicpressureLT: Int
  systemicpressureLTE: Int
  """
  torment field predicates
  """
  torment: Int
  tormentNEQ: Int
  tormentIn: [Int!]
  tormentNotIn: [Int!]
  tormentGT: Int
  tormentGTE: Int
  tormentLT: Int
  tormentLTE: Int
  """
  insanity field predicates
  """
  insanity: Int
  insanityNEQ: Int
  insanityIn: [Int!]
  insanityNotIn: [Int!]
  insanityGT: Int
  insanityGTE: Int
  insanityLT: Int
  insanityLTE: Int
  """
  lumi field predicates
  """
  lumi: Int
  lumiNEQ: Int
  lumiIn: [Int!]
  lumiNotIn: [Int!]
  lumiGT: Int
  lumiGTE: Int
  lumiLT: Int
  lumiLTE: Int
  """
  courage field predicates
  """
  courage: Int
  courageNEQ: Int
  courageIn: [Int!]
  courageNotIn: [Int!]
  courageGT: Int
  courageGTE: Int
  courageLT: Int
  courageLTE: Int
  """
  understanding field predicates
  """
  understanding: Int
  understandingNEQ: Int
  understandingIn: [Int!]
  understandingNotIn: [Int!]
  understandingGT: Int
  understandingGTE: Int
  understandingLT: Int
  understandingLTE: Int
  """
  status field predicates
  """
  status: SurvivorStatus
  statusNEQ: SurvivorStatus
  statusIn: [SurvivorStatus!]
  statusNotIn: [SurvivorStatus!]
  """
  status_change_year field predicates
  """
  statusChangeYear: Int
  statusChangeYearNEQ: Int
  statusChangeYearIn: [Int!]
  statusChangeYearNotIn: [Int!]
  statusChangeYearGT: Int
  statusChangeYearGTE: Int
  statusChangeYearLT: Int
  statusChangeYearLTE: Int
  """
  settlement_id field predicates
  """
  settlementID: ID
  settlementIDNEQ: ID
  settlementIDIn: [ID!]
  settlementIDNotIn: [ID!]
  settlementIDIsNil: Boolean
  settlementIDNotNil: Boolean
  """
  settlement edge predicates
  """
  hasSettlement: Boolean
  hasSettlementWith: [SettlementWhereInput!]
}
"""
UpdateSettlementInput is used for update Settlement object.
Input was generated by ent.
"""
input UpdateSettlementInput {
  owner: String
  name: String
  survivallimit: Int
  departingsurvival: Int
  collectivecognition: Int
  currentyear: Int
  addPopulationIDs: [ID!]
  removePopulationIDs: [ID!]
  clearPopulation: Boolean
}
"""
UpdateSurvivorInput is used for update Survivor object.
Input was generated by ent.
"""
input UpdateSurvivorInput {
  name: String
  born: Int
  gender: SurvivorGender
  huntxp: Int
  survival: Int
  movement: Int
  accuracy: Int
  strength: Int
  evasion: Int
  luck: Int
  speed: Int
  systemicpressure: Int
  torment: Int
  insanity: Int
  lumi: Int
  courage: Int
  understanding: Int
  status: SurvivorStatus
  statusChangeYear: Int
  settlementID: ID
  clearSettlement: Boolean
}
