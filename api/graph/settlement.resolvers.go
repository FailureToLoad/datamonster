package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/failuretoload/datamonster/ent"
	"github.com/failuretoload/datamonster/ent/settlement"
)

// CreateSettlement is the resolver for the createSettlement field.
func (r *mutationResolver) CreateSettlement(ctx context.Context, input ent.CreateSettlementInput) (*ent.Settlement, error) {
	return ent.FromContext(ctx).Settlement.Create().SetInput(input).Save(ctx)
}

// UpdateSettlement is the resolver for the updateSettlement field.
func (r *mutationResolver) UpdateSettlement(ctx context.Context, id int, input ent.UpdateSettlementInput) (*ent.Settlement, error) {
	return ent.FromContext(ctx).Settlement.UpdateOneID(id).SetInput(input).Save(ctx)
}

// Settlements is the resolver for the settlements field.
func (r *queryResolver) Settlements(ctx context.Context, where *ent.SettlementWhereInput) ([]*ent.Settlement, error) {
	query := r.client.Settlement.Query()
	var err error
	if where != nil {
		query, err = where.Filter(query)
		if err != nil {
			return nil, err
		}
	}

	return query.Order(settlement.ByCurrentYear(sql.OrderDesc())).All(ctx)
}

// CreateSurvivors is the resolver for the createSurvivors field.
func (r *createSettlementInputResolver) CreateSurvivors(ctx context.Context, obj *ent.CreateSettlementInput, data []*ent.CreateSurvivorInput) error {
	c := ent.FromContext(ctx)
	builders := make([]*ent.SurvivorCreate, len(data))
	for i := range data {
		builders[i] = c.Survivor.Create().SetInput(*data[i])
	}
	survivors, err := c.Survivor.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}
	ids := make([]int, len(survivors))
	for i := range survivors {
		ids[i] = survivors[i].ID
	}
	obj.PopulationIDs = append(obj.PopulationIDs, ids...)
	return nil
}

// AddSurvivors is the resolver for the addSurvivors field.
func (r *updateSettlementInputResolver) AddSurvivors(ctx context.Context, obj *ent.UpdateSettlementInput, data []*ent.CreateSurvivorInput) error {
	c := ent.FromContext(ctx)
	builders := make([]*ent.SurvivorCreate, len(data))
	for i := range data {
		builders[i] = c.Survivor.Create().SetInput(*data[i])
	}
	survivors, err := c.Survivor.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}
	ids := make([]int, len(survivors))
	for i := range survivors {
		ids[i] = survivors[i].ID
	}
	obj.AddPopulationIDs = append(obj.AddPopulationIDs, ids...)
	return nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
