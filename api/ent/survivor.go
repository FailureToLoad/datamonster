// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// Survivor is the model entity for the Survivor schema.
type Survivor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Born holds the value of the "born" field.
	Born int `json:"born,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender survivor.Gender `json:"gender,omitempty"`
	// Huntxp holds the value of the "huntxp" field.
	Huntxp int `json:"huntxp,omitempty"`
	// Survival holds the value of the "survival" field.
	Survival int `json:"survival,omitempty"`
	// Movement holds the value of the "movement" field.
	Movement int `json:"movement,omitempty"`
	// Accuracy holds the value of the "accuracy" field.
	Accuracy int `json:"accuracy,omitempty"`
	// Strength holds the value of the "strength" field.
	Strength int `json:"strength,omitempty"`
	// Evasion holds the value of the "evasion" field.
	Evasion int `json:"evasion,omitempty"`
	// Luck holds the value of the "luck" field.
	Luck int `json:"luck,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed int `json:"speed,omitempty"`
	// Systemicpressure holds the value of the "systemicpressure" field.
	Systemicpressure int `json:"systemicpressure,omitempty"`
	// Torment holds the value of the "torment" field.
	Torment int `json:"torment,omitempty"`
	// Insanity holds the value of the "insanity" field.
	Insanity int `json:"insanity,omitempty"`
	// Lumi holds the value of the "lumi" field.
	Lumi int `json:"lumi,omitempty"`
	// Courage holds the value of the "courage" field.
	Courage int `json:"courage,omitempty"`
	// Understanding holds the value of the "understanding" field.
	Understanding int `json:"understanding,omitempty"`
	// SettlementID holds the value of the "settlement_id" field.
	SettlementID int `json:"settlement_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurvivorQuery when eager-loading is set.
	Edges        SurvivorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SurvivorEdges holds the relations/edges for other nodes in the graph.
type SurvivorEdges struct {
	// Settlement holds the value of the settlement edge.
	Settlement *Settlement `json:"settlement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SettlementOrErr returns the Settlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurvivorEdges) SettlementOrErr() (*Settlement, error) {
	if e.Settlement != nil {
		return e.Settlement, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: settlement.Label}
	}
	return nil, &NotLoadedError{edge: "settlement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Survivor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case survivor.FieldID, survivor.FieldBorn, survivor.FieldHuntxp, survivor.FieldSurvival, survivor.FieldMovement, survivor.FieldAccuracy, survivor.FieldStrength, survivor.FieldEvasion, survivor.FieldLuck, survivor.FieldSpeed, survivor.FieldSystemicpressure, survivor.FieldTorment, survivor.FieldInsanity, survivor.FieldLumi, survivor.FieldCourage, survivor.FieldUnderstanding, survivor.FieldSettlementID:
			values[i] = new(sql.NullInt64)
		case survivor.FieldName, survivor.FieldGender:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Survivor fields.
func (s *Survivor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case survivor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case survivor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case survivor.FieldBorn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field born", values[i])
			} else if value.Valid {
				s.Born = int(value.Int64)
			}
		case survivor.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				s.Gender = survivor.Gender(value.String)
			}
		case survivor.FieldHuntxp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field huntxp", values[i])
			} else if value.Valid {
				s.Huntxp = int(value.Int64)
			}
		case survivor.FieldSurvival:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survival", values[i])
			} else if value.Valid {
				s.Survival = int(value.Int64)
			}
		case survivor.FieldMovement:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field movement", values[i])
			} else if value.Valid {
				s.Movement = int(value.Int64)
			}
		case survivor.FieldAccuracy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accuracy", values[i])
			} else if value.Valid {
				s.Accuracy = int(value.Int64)
			}
		case survivor.FieldStrength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field strength", values[i])
			} else if value.Valid {
				s.Strength = int(value.Int64)
			}
		case survivor.FieldEvasion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field evasion", values[i])
			} else if value.Valid {
				s.Evasion = int(value.Int64)
			}
		case survivor.FieldLuck:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field luck", values[i])
			} else if value.Valid {
				s.Luck = int(value.Int64)
			}
		case survivor.FieldSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				s.Speed = int(value.Int64)
			}
		case survivor.FieldSystemicpressure:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field systemicpressure", values[i])
			} else if value.Valid {
				s.Systemicpressure = int(value.Int64)
			}
		case survivor.FieldTorment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field torment", values[i])
			} else if value.Valid {
				s.Torment = int(value.Int64)
			}
		case survivor.FieldInsanity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field insanity", values[i])
			} else if value.Valid {
				s.Insanity = int(value.Int64)
			}
		case survivor.FieldLumi:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lumi", values[i])
			} else if value.Valid {
				s.Lumi = int(value.Int64)
			}
		case survivor.FieldCourage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field courage", values[i])
			} else if value.Valid {
				s.Courage = int(value.Int64)
			}
		case survivor.FieldUnderstanding:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field understanding", values[i])
			} else if value.Valid {
				s.Understanding = int(value.Int64)
			}
		case survivor.FieldSettlementID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field settlement_id", values[i])
			} else if value.Valid {
				s.SettlementID = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Survivor.
// This includes values selected through modifiers, order, etc.
func (s *Survivor) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySettlement queries the "settlement" edge of the Survivor entity.
func (s *Survivor) QuerySettlement() *SettlementQuery {
	return NewSurvivorClient(s.config).QuerySettlement(s)
}

// Update returns a builder for updating this Survivor.
// Note that you need to call Survivor.Unwrap() before calling this method if this Survivor
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Survivor) Update() *SurvivorUpdateOne {
	return NewSurvivorClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Survivor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Survivor) Unwrap() *Survivor {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Survivor is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Survivor) String() string {
	var builder strings.Builder
	builder.WriteString("Survivor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("born=")
	builder.WriteString(fmt.Sprintf("%v", s.Born))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", s.Gender))
	builder.WriteString(", ")
	builder.WriteString("huntxp=")
	builder.WriteString(fmt.Sprintf("%v", s.Huntxp))
	builder.WriteString(", ")
	builder.WriteString("survival=")
	builder.WriteString(fmt.Sprintf("%v", s.Survival))
	builder.WriteString(", ")
	builder.WriteString("movement=")
	builder.WriteString(fmt.Sprintf("%v", s.Movement))
	builder.WriteString(", ")
	builder.WriteString("accuracy=")
	builder.WriteString(fmt.Sprintf("%v", s.Accuracy))
	builder.WriteString(", ")
	builder.WriteString("strength=")
	builder.WriteString(fmt.Sprintf("%v", s.Strength))
	builder.WriteString(", ")
	builder.WriteString("evasion=")
	builder.WriteString(fmt.Sprintf("%v", s.Evasion))
	builder.WriteString(", ")
	builder.WriteString("luck=")
	builder.WriteString(fmt.Sprintf("%v", s.Luck))
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(fmt.Sprintf("%v", s.Speed))
	builder.WriteString(", ")
	builder.WriteString("systemicpressure=")
	builder.WriteString(fmt.Sprintf("%v", s.Systemicpressure))
	builder.WriteString(", ")
	builder.WriteString("torment=")
	builder.WriteString(fmt.Sprintf("%v", s.Torment))
	builder.WriteString(", ")
	builder.WriteString("insanity=")
	builder.WriteString(fmt.Sprintf("%v", s.Insanity))
	builder.WriteString(", ")
	builder.WriteString("lumi=")
	builder.WriteString(fmt.Sprintf("%v", s.Lumi))
	builder.WriteString(", ")
	builder.WriteString("courage=")
	builder.WriteString(fmt.Sprintf("%v", s.Courage))
	builder.WriteString(", ")
	builder.WriteString("understanding=")
	builder.WriteString(fmt.Sprintf("%v", s.Understanding))
	builder.WriteString(", ")
	builder.WriteString("settlement_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SettlementID))
	builder.WriteByte(')')
	return builder.String()
}

// Survivors is a parsable slice of Survivor.
type Survivors []*Survivor
