// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/failuretoload/datamonster/ent/schema"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	settlementFields := schema.Settlement{}.Fields()
	_ = settlementFields
	// settlementDescOwner is the schema descriptor for owner field.
	settlementDescOwner := settlementFields[0].Descriptor()
	// settlement.OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	settlement.OwnerValidator = settlementDescOwner.Validators[0].(func(string) error)
	// settlementDescName is the schema descriptor for name field.
	settlementDescName := settlementFields[1].Descriptor()
	// settlement.NameValidator is a validator for the "name" field. It is called by the builders before save.
	settlement.NameValidator = func() func(string) error {
		validators := settlementDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// settlementDescSurvivalLimit is the schema descriptor for survivalLimit field.
	settlementDescSurvivalLimit := settlementFields[2].Descriptor()
	// settlement.DefaultSurvivalLimit holds the default value on creation for the survivalLimit field.
	settlement.DefaultSurvivalLimit = settlementDescSurvivalLimit.Default.(int)
	// settlement.SurvivalLimitValidator is a validator for the "survivalLimit" field. It is called by the builders before save.
	settlement.SurvivalLimitValidator = settlementDescSurvivalLimit.Validators[0].(func(int) error)
	// settlementDescDepartingSurvival is the schema descriptor for departingSurvival field.
	settlementDescDepartingSurvival := settlementFields[3].Descriptor()
	// settlement.DefaultDepartingSurvival holds the default value on creation for the departingSurvival field.
	settlement.DefaultDepartingSurvival = settlementDescDepartingSurvival.Default.(int)
	// settlement.DepartingSurvivalValidator is a validator for the "departingSurvival" field. It is called by the builders before save.
	settlement.DepartingSurvivalValidator = settlementDescDepartingSurvival.Validators[0].(func(int) error)
	// settlementDescCollectiveCognition is the schema descriptor for collectiveCognition field.
	settlementDescCollectiveCognition := settlementFields[4].Descriptor()
	// settlement.DefaultCollectiveCognition holds the default value on creation for the collectiveCognition field.
	settlement.DefaultCollectiveCognition = settlementDescCollectiveCognition.Default.(int)
	// settlement.CollectiveCognitionValidator is a validator for the "collectiveCognition" field. It is called by the builders before save.
	settlement.CollectiveCognitionValidator = func() func(int) error {
		validators := settlementDescCollectiveCognition.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(collectiveCognition int) error {
			for _, fn := range fns {
				if err := fn(collectiveCognition); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// settlementDescCurrentYear is the schema descriptor for currentYear field.
	settlementDescCurrentYear := settlementFields[5].Descriptor()
	// settlement.DefaultCurrentYear holds the default value on creation for the currentYear field.
	settlement.DefaultCurrentYear = settlementDescCurrentYear.Default.(int)
	// settlement.CurrentYearValidator is a validator for the "currentYear" field. It is called by the builders before save.
	settlement.CurrentYearValidator = func() func(int) error {
		validators := settlementDescCurrentYear.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(currentYear int) error {
			for _, fn := range fns {
				if err := fn(currentYear); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	survivorFields := schema.Survivor{}.Fields()
	_ = survivorFields
	// survivorDescName is the schema descriptor for name field.
	survivorDescName := survivorFields[0].Descriptor()
	// survivor.NameValidator is a validator for the "name" field. It is called by the builders before save.
	survivor.NameValidator = func() func(string) error {
		validators := survivorDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescBorn is the schema descriptor for born field.
	survivorDescBorn := survivorFields[1].Descriptor()
	// survivor.DefaultBorn holds the default value on creation for the born field.
	survivor.DefaultBorn = survivorDescBorn.Default.(int)
	// survivor.BornValidator is a validator for the "born" field. It is called by the builders before save.
	survivor.BornValidator = func() func(int) error {
		validators := survivorDescBorn.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(born int) error {
			for _, fn := range fns {
				if err := fn(born); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescHuntxp is the schema descriptor for huntxp field.
	survivorDescHuntxp := survivorFields[3].Descriptor()
	// survivor.DefaultHuntxp holds the default value on creation for the huntxp field.
	survivor.DefaultHuntxp = survivorDescHuntxp.Default.(int)
	// survivor.HuntxpValidator is a validator for the "huntxp" field. It is called by the builders before save.
	survivor.HuntxpValidator = func() func(int) error {
		validators := survivorDescHuntxp.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(huntxp int) error {
			for _, fn := range fns {
				if err := fn(huntxp); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescSurvival is the schema descriptor for survival field.
	survivorDescSurvival := survivorFields[4].Descriptor()
	// survivor.DefaultSurvival holds the default value on creation for the survival field.
	survivor.DefaultSurvival = survivorDescSurvival.Default.(int)
	// survivor.SurvivalValidator is a validator for the "survival" field. It is called by the builders before save.
	survivor.SurvivalValidator = func() func(int) error {
		validators := survivorDescSurvival.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(survival int) error {
			for _, fn := range fns {
				if err := fn(survival); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescMovement is the schema descriptor for movement field.
	survivorDescMovement := survivorFields[5].Descriptor()
	// survivor.DefaultMovement holds the default value on creation for the movement field.
	survivor.DefaultMovement = survivorDescMovement.Default.(int)
	// survivor.MovementValidator is a validator for the "movement" field. It is called by the builders before save.
	survivor.MovementValidator = func() func(int) error {
		validators := survivorDescMovement.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(movement int) error {
			for _, fn := range fns {
				if err := fn(movement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescAccuracy is the schema descriptor for accuracy field.
	survivorDescAccuracy := survivorFields[6].Descriptor()
	// survivor.DefaultAccuracy holds the default value on creation for the accuracy field.
	survivor.DefaultAccuracy = survivorDescAccuracy.Default.(int)
	// survivor.AccuracyValidator is a validator for the "accuracy" field. It is called by the builders before save.
	survivor.AccuracyValidator = func() func(int) error {
		validators := survivorDescAccuracy.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(accuracy int) error {
			for _, fn := range fns {
				if err := fn(accuracy); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescStrength is the schema descriptor for strength field.
	survivorDescStrength := survivorFields[7].Descriptor()
	// survivor.DefaultStrength holds the default value on creation for the strength field.
	survivor.DefaultStrength = survivorDescStrength.Default.(int)
	// survivor.StrengthValidator is a validator for the "strength" field. It is called by the builders before save.
	survivor.StrengthValidator = func() func(int) error {
		validators := survivorDescStrength.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(strength int) error {
			for _, fn := range fns {
				if err := fn(strength); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescEvasion is the schema descriptor for evasion field.
	survivorDescEvasion := survivorFields[8].Descriptor()
	// survivor.DefaultEvasion holds the default value on creation for the evasion field.
	survivor.DefaultEvasion = survivorDescEvasion.Default.(int)
	// survivor.EvasionValidator is a validator for the "evasion" field. It is called by the builders before save.
	survivor.EvasionValidator = func() func(int) error {
		validators := survivorDescEvasion.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(evasion int) error {
			for _, fn := range fns {
				if err := fn(evasion); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescLuck is the schema descriptor for luck field.
	survivorDescLuck := survivorFields[9].Descriptor()
	// survivor.DefaultLuck holds the default value on creation for the luck field.
	survivor.DefaultLuck = survivorDescLuck.Default.(int)
	// survivor.LuckValidator is a validator for the "luck" field. It is called by the builders before save.
	survivor.LuckValidator = func() func(int) error {
		validators := survivorDescLuck.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(luck int) error {
			for _, fn := range fns {
				if err := fn(luck); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescSpeed is the schema descriptor for speed field.
	survivorDescSpeed := survivorFields[10].Descriptor()
	// survivor.DefaultSpeed holds the default value on creation for the speed field.
	survivor.DefaultSpeed = survivorDescSpeed.Default.(int)
	// survivor.SpeedValidator is a validator for the "speed" field. It is called by the builders before save.
	survivor.SpeedValidator = func() func(int) error {
		validators := survivorDescSpeed.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(speed int) error {
			for _, fn := range fns {
				if err := fn(speed); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescSystemicpressure is the schema descriptor for systemicpressure field.
	survivorDescSystemicpressure := survivorFields[11].Descriptor()
	// survivor.DefaultSystemicpressure holds the default value on creation for the systemicpressure field.
	survivor.DefaultSystemicpressure = survivorDescSystemicpressure.Default.(int)
	// survivor.SystemicpressureValidator is a validator for the "systemicpressure" field. It is called by the builders before save.
	survivor.SystemicpressureValidator = func() func(int) error {
		validators := survivorDescSystemicpressure.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(systemicpressure int) error {
			for _, fn := range fns {
				if err := fn(systemicpressure); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescTorment is the schema descriptor for torment field.
	survivorDescTorment := survivorFields[12].Descriptor()
	// survivor.DefaultTorment holds the default value on creation for the torment field.
	survivor.DefaultTorment = survivorDescTorment.Default.(int)
	// survivor.TormentValidator is a validator for the "torment" field. It is called by the builders before save.
	survivor.TormentValidator = func() func(int) error {
		validators := survivorDescTorment.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(torment int) error {
			for _, fn := range fns {
				if err := fn(torment); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescInsanity is the schema descriptor for insanity field.
	survivorDescInsanity := survivorFields[13].Descriptor()
	// survivor.DefaultInsanity holds the default value on creation for the insanity field.
	survivor.DefaultInsanity = survivorDescInsanity.Default.(int)
	// survivor.InsanityValidator is a validator for the "insanity" field. It is called by the builders before save.
	survivor.InsanityValidator = survivorDescInsanity.Validators[0].(func(int) error)
	// survivorDescLumi is the schema descriptor for lumi field.
	survivorDescLumi := survivorFields[14].Descriptor()
	// survivor.DefaultLumi holds the default value on creation for the lumi field.
	survivor.DefaultLumi = survivorDescLumi.Default.(int)
	// survivor.LumiValidator is a validator for the "lumi" field. It is called by the builders before save.
	survivor.LumiValidator = survivorDescLumi.Validators[0].(func(int) error)
	// survivorDescCourage is the schema descriptor for courage field.
	survivorDescCourage := survivorFields[15].Descriptor()
	// survivor.DefaultCourage holds the default value on creation for the courage field.
	survivor.DefaultCourage = survivorDescCourage.Default.(int)
	// survivor.CourageValidator is a validator for the "courage" field. It is called by the builders before save.
	survivor.CourageValidator = func() func(int) error {
		validators := survivorDescCourage.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(courage int) error {
			for _, fn := range fns {
				if err := fn(courage); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// survivorDescUnderstanding is the schema descriptor for understanding field.
	survivorDescUnderstanding := survivorFields[16].Descriptor()
	// survivor.DefaultUnderstanding holds the default value on creation for the understanding field.
	survivor.DefaultUnderstanding = survivorDescUnderstanding.Default.(int)
	// survivor.UnderstandingValidator is a validator for the "understanding" field. It is called by the builders before save.
	survivor.UnderstandingValidator = func() func(int) error {
		validators := survivorDescUnderstanding.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(understanding int) error {
			for _, fn := range fns {
				if err := fn(understanding); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
