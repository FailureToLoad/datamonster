// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/failuretoload/datamonster/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Settlement is the client for interacting with the Settlement builders.
	Settlement *SettlementClient
	// Survivor is the client for interacting with the Survivor builders.
	Survivor *SurvivorClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Settlement = NewSettlementClient(c.config)
	c.Survivor = NewSurvivorClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Settlement: NewSettlementClient(cfg),
		Survivor:   NewSurvivorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Settlement: NewSettlementClient(cfg),
		Survivor:   NewSurvivorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Settlement.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Settlement.Use(hooks...)
	c.Survivor.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Settlement.Intercept(interceptors...)
	c.Survivor.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *SettlementMutation:
		return c.Settlement.mutate(ctx, m)
	case *SurvivorMutation:
		return c.Survivor.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// SettlementClient is a client for the Settlement schema.
type SettlementClient struct {
	config
}

// NewSettlementClient returns a client for the Settlement from the given config.
func NewSettlementClient(c config) *SettlementClient {
	return &SettlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `settlement.Hooks(f(g(h())))`.
func (c *SettlementClient) Use(hooks ...Hook) {
	c.hooks.Settlement = append(c.hooks.Settlement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `settlement.Intercept(f(g(h())))`.
func (c *SettlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Settlement = append(c.inters.Settlement, interceptors...)
}

// Create returns a builder for creating a Settlement entity.
func (c *SettlementClient) Create() *SettlementCreate {
	mutation := newSettlementMutation(c.config, OpCreate)
	return &SettlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Settlement entities.
func (c *SettlementClient) CreateBulk(builders ...*SettlementCreate) *SettlementCreateBulk {
	return &SettlementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SettlementClient) MapCreateBulk(slice any, setFunc func(*SettlementCreate, int)) *SettlementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SettlementCreateBulk{err: fmt.Errorf("calling to SettlementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SettlementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SettlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Settlement.
func (c *SettlementClient) Update() *SettlementUpdate {
	mutation := newSettlementMutation(c.config, OpUpdate)
	return &SettlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettlementClient) UpdateOne(s *Settlement) *SettlementUpdateOne {
	mutation := newSettlementMutation(c.config, OpUpdateOne, withSettlement(s))
	return &SettlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettlementClient) UpdateOneID(id int) *SettlementUpdateOne {
	mutation := newSettlementMutation(c.config, OpUpdateOne, withSettlementID(id))
	return &SettlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Settlement.
func (c *SettlementClient) Delete() *SettlementDelete {
	mutation := newSettlementMutation(c.config, OpDelete)
	return &SettlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettlementClient) DeleteOne(s *Settlement) *SettlementDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettlementClient) DeleteOneID(id int) *SettlementDeleteOne {
	builder := c.Delete().Where(settlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettlementDeleteOne{builder}
}

// Query returns a query builder for Settlement.
func (c *SettlementClient) Query() *SettlementQuery {
	return &SettlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSettlement},
		inters: c.Interceptors(),
	}
}

// Get returns a Settlement entity by its id.
func (c *SettlementClient) Get(ctx context.Context, id int) (*Settlement, error) {
	return c.Query().Where(settlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettlementClient) GetX(ctx context.Context, id int) *Settlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPopulation queries the population edge of a Settlement.
func (c *SettlementClient) QueryPopulation(s *Settlement) *SurvivorQuery {
	query := (&SurvivorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(settlement.Table, settlement.FieldID, id),
			sqlgraph.To(survivor.Table, survivor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, settlement.PopulationTable, settlement.PopulationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SettlementClient) Hooks() []Hook {
	return c.hooks.Settlement
}

// Interceptors returns the client interceptors.
func (c *SettlementClient) Interceptors() []Interceptor {
	return c.inters.Settlement
}

func (c *SettlementClient) mutate(ctx context.Context, m *SettlementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettlementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettlementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettlementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Settlement mutation op: %q", m.Op())
	}
}

// SurvivorClient is a client for the Survivor schema.
type SurvivorClient struct {
	config
}

// NewSurvivorClient returns a client for the Survivor from the given config.
func NewSurvivorClient(c config) *SurvivorClient {
	return &SurvivorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `survivor.Hooks(f(g(h())))`.
func (c *SurvivorClient) Use(hooks ...Hook) {
	c.hooks.Survivor = append(c.hooks.Survivor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `survivor.Intercept(f(g(h())))`.
func (c *SurvivorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Survivor = append(c.inters.Survivor, interceptors...)
}

// Create returns a builder for creating a Survivor entity.
func (c *SurvivorClient) Create() *SurvivorCreate {
	mutation := newSurvivorMutation(c.config, OpCreate)
	return &SurvivorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Survivor entities.
func (c *SurvivorClient) CreateBulk(builders ...*SurvivorCreate) *SurvivorCreateBulk {
	return &SurvivorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SurvivorClient) MapCreateBulk(slice any, setFunc func(*SurvivorCreate, int)) *SurvivorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SurvivorCreateBulk{err: fmt.Errorf("calling to SurvivorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SurvivorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SurvivorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Survivor.
func (c *SurvivorClient) Update() *SurvivorUpdate {
	mutation := newSurvivorMutation(c.config, OpUpdate)
	return &SurvivorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurvivorClient) UpdateOne(s *Survivor) *SurvivorUpdateOne {
	mutation := newSurvivorMutation(c.config, OpUpdateOne, withSurvivor(s))
	return &SurvivorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurvivorClient) UpdateOneID(id int) *SurvivorUpdateOne {
	mutation := newSurvivorMutation(c.config, OpUpdateOne, withSurvivorID(id))
	return &SurvivorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Survivor.
func (c *SurvivorClient) Delete() *SurvivorDelete {
	mutation := newSurvivorMutation(c.config, OpDelete)
	return &SurvivorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SurvivorClient) DeleteOne(s *Survivor) *SurvivorDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SurvivorClient) DeleteOneID(id int) *SurvivorDeleteOne {
	builder := c.Delete().Where(survivor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurvivorDeleteOne{builder}
}

// Query returns a query builder for Survivor.
func (c *SurvivorClient) Query() *SurvivorQuery {
	return &SurvivorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSurvivor},
		inters: c.Interceptors(),
	}
}

// Get returns a Survivor entity by its id.
func (c *SurvivorClient) Get(ctx context.Context, id int) (*Survivor, error) {
	return c.Query().Where(survivor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurvivorClient) GetX(ctx context.Context, id int) *Survivor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySettlement queries the settlement edge of a Survivor.
func (c *SurvivorClient) QuerySettlement(s *Survivor) *SettlementQuery {
	query := (&SettlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survivor.Table, survivor.FieldID, id),
			sqlgraph.To(settlement.Table, settlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, survivor.SettlementTable, survivor.SettlementColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurvivorClient) Hooks() []Hook {
	return c.hooks.Survivor
}

// Interceptors returns the client interceptors.
func (c *SurvivorClient) Interceptors() []Interceptor {
	return c.inters.Survivor
}

func (c *SurvivorClient) mutate(ctx context.Context, m *SurvivorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SurvivorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SurvivorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SurvivorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SurvivorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Survivor mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Settlement, Survivor []ent.Hook
	}
	inters struct {
		Settlement, Survivor []ent.Interceptor
	}
)
