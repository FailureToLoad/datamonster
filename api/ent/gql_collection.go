// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SettlementQuery) CollectFields(ctx context.Context, satisfies ...string) (*SettlementQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SettlementQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(settlement.Columns))
		selectedFields = []string{settlement.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "population":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SurvivorClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, survivorImplementors)...); err != nil {
				return err
			}
			s.WithNamedPopulation(alias, func(wq *SurvivorQuery) {
				*wq = *query
			})
		case "owner":
			if _, ok := fieldSeen[settlement.FieldOwner]; !ok {
				selectedFields = append(selectedFields, settlement.FieldOwner)
				fieldSeen[settlement.FieldOwner] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[settlement.FieldName]; !ok {
				selectedFields = append(selectedFields, settlement.FieldName)
				fieldSeen[settlement.FieldName] = struct{}{}
			}
		case "survivallimit":
			if _, ok := fieldSeen[settlement.FieldSurvivalLimit]; !ok {
				selectedFields = append(selectedFields, settlement.FieldSurvivalLimit)
				fieldSeen[settlement.FieldSurvivalLimit] = struct{}{}
			}
		case "departingsurvival":
			if _, ok := fieldSeen[settlement.FieldDepartingSurvival]; !ok {
				selectedFields = append(selectedFields, settlement.FieldDepartingSurvival)
				fieldSeen[settlement.FieldDepartingSurvival] = struct{}{}
			}
		case "collectivecognition":
			if _, ok := fieldSeen[settlement.FieldCollectiveCognition]; !ok {
				selectedFields = append(selectedFields, settlement.FieldCollectiveCognition)
				fieldSeen[settlement.FieldCollectiveCognition] = struct{}{}
			}
		case "currentyear":
			if _, ok := fieldSeen[settlement.FieldCurrentYear]; !ok {
				selectedFields = append(selectedFields, settlement.FieldCurrentYear)
				fieldSeen[settlement.FieldCurrentYear] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type settlementPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SettlementPaginateOption
}

func newSettlementPaginateArgs(rv map[string]any) *settlementPaginateArgs {
	args := &settlementPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &SettlementOrder{Field: &SettlementOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithSettlementOrder(order))
			}
		case *SettlementOrder:
			if v != nil {
				args.opts = append(args.opts, WithSettlementOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*SettlementWhereInput); ok {
		args.opts = append(args.opts, WithSettlementFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SurvivorQuery) CollectFields(ctx context.Context, satisfies ...string) (*SurvivorQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SurvivorQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(survivor.Columns))
		selectedFields = []string{survivor.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "settlement":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SettlementClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, settlementImplementors)...); err != nil {
				return err
			}
			s.withSettlement = query
			if _, ok := fieldSeen[survivor.FieldSettlementID]; !ok {
				selectedFields = append(selectedFields, survivor.FieldSettlementID)
				fieldSeen[survivor.FieldSettlementID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[survivor.FieldName]; !ok {
				selectedFields = append(selectedFields, survivor.FieldName)
				fieldSeen[survivor.FieldName] = struct{}{}
			}
		case "born":
			if _, ok := fieldSeen[survivor.FieldBorn]; !ok {
				selectedFields = append(selectedFields, survivor.FieldBorn)
				fieldSeen[survivor.FieldBorn] = struct{}{}
			}
		case "gender":
			if _, ok := fieldSeen[survivor.FieldGender]; !ok {
				selectedFields = append(selectedFields, survivor.FieldGender)
				fieldSeen[survivor.FieldGender] = struct{}{}
			}
		case "huntxp":
			if _, ok := fieldSeen[survivor.FieldHuntxp]; !ok {
				selectedFields = append(selectedFields, survivor.FieldHuntxp)
				fieldSeen[survivor.FieldHuntxp] = struct{}{}
			}
		case "survival":
			if _, ok := fieldSeen[survivor.FieldSurvival]; !ok {
				selectedFields = append(selectedFields, survivor.FieldSurvival)
				fieldSeen[survivor.FieldSurvival] = struct{}{}
			}
		case "movement":
			if _, ok := fieldSeen[survivor.FieldMovement]; !ok {
				selectedFields = append(selectedFields, survivor.FieldMovement)
				fieldSeen[survivor.FieldMovement] = struct{}{}
			}
		case "accuracy":
			if _, ok := fieldSeen[survivor.FieldAccuracy]; !ok {
				selectedFields = append(selectedFields, survivor.FieldAccuracy)
				fieldSeen[survivor.FieldAccuracy] = struct{}{}
			}
		case "strength":
			if _, ok := fieldSeen[survivor.FieldStrength]; !ok {
				selectedFields = append(selectedFields, survivor.FieldStrength)
				fieldSeen[survivor.FieldStrength] = struct{}{}
			}
		case "evasion":
			if _, ok := fieldSeen[survivor.FieldEvasion]; !ok {
				selectedFields = append(selectedFields, survivor.FieldEvasion)
				fieldSeen[survivor.FieldEvasion] = struct{}{}
			}
		case "luck":
			if _, ok := fieldSeen[survivor.FieldLuck]; !ok {
				selectedFields = append(selectedFields, survivor.FieldLuck)
				fieldSeen[survivor.FieldLuck] = struct{}{}
			}
		case "speed":
			if _, ok := fieldSeen[survivor.FieldSpeed]; !ok {
				selectedFields = append(selectedFields, survivor.FieldSpeed)
				fieldSeen[survivor.FieldSpeed] = struct{}{}
			}
		case "systemicpressure":
			if _, ok := fieldSeen[survivor.FieldSystemicpressure]; !ok {
				selectedFields = append(selectedFields, survivor.FieldSystemicpressure)
				fieldSeen[survivor.FieldSystemicpressure] = struct{}{}
			}
		case "torment":
			if _, ok := fieldSeen[survivor.FieldTorment]; !ok {
				selectedFields = append(selectedFields, survivor.FieldTorment)
				fieldSeen[survivor.FieldTorment] = struct{}{}
			}
		case "insanity":
			if _, ok := fieldSeen[survivor.FieldInsanity]; !ok {
				selectedFields = append(selectedFields, survivor.FieldInsanity)
				fieldSeen[survivor.FieldInsanity] = struct{}{}
			}
		case "lumi":
			if _, ok := fieldSeen[survivor.FieldLumi]; !ok {
				selectedFields = append(selectedFields, survivor.FieldLumi)
				fieldSeen[survivor.FieldLumi] = struct{}{}
			}
		case "courage":
			if _, ok := fieldSeen[survivor.FieldCourage]; !ok {
				selectedFields = append(selectedFields, survivor.FieldCourage)
				fieldSeen[survivor.FieldCourage] = struct{}{}
			}
		case "understanding":
			if _, ok := fieldSeen[survivor.FieldUnderstanding]; !ok {
				selectedFields = append(selectedFields, survivor.FieldUnderstanding)
				fieldSeen[survivor.FieldUnderstanding] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[survivor.FieldStatus]; !ok {
				selectedFields = append(selectedFields, survivor.FieldStatus)
				fieldSeen[survivor.FieldStatus] = struct{}{}
			}
		case "statusChangeYear":
			if _, ok := fieldSeen[survivor.FieldStatusChangeYear]; !ok {
				selectedFields = append(selectedFields, survivor.FieldStatusChangeYear)
				fieldSeen[survivor.FieldStatusChangeYear] = struct{}{}
			}
		case "settlementID":
			if _, ok := fieldSeen[survivor.FieldSettlementID]; !ok {
				selectedFields = append(selectedFields, survivor.FieldSettlementID)
				fieldSeen[survivor.FieldSettlementID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type survivorPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SurvivorPaginateOption
}

func newSurvivorPaginateArgs(rv map[string]any) *survivorPaginateArgs {
	args := &survivorPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &SurvivorOrder{Field: &SurvivorOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithSurvivorOrder(order))
			}
		case *SurvivorOrder:
			if v != nil {
				args.opts = append(args.opts, WithSurvivorOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*SurvivorWhereInput); ok {
		args.opts = append(args.opts, WithSurvivorFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
