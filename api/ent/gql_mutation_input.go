// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/failuretoload/datamonster/ent/survivor"
)

// CreateSettlementInput represents a mutation input for creating settlements.
type CreateSettlementInput struct {
	Owner               string
	Name                string
	SurvivalLimit       *int
	DepartingSurvival   *int
	CollectiveCognition *int
	CurrentYear         *int
	PopulationIDs       []int
}

// Mutate applies the CreateSettlementInput on the SettlementMutation builder.
func (i *CreateSettlementInput) Mutate(m *SettlementMutation) {
	m.SetOwner(i.Owner)
	m.SetName(i.Name)
	if v := i.SurvivalLimit; v != nil {
		m.SetSurvivalLimit(*v)
	}
	if v := i.DepartingSurvival; v != nil {
		m.SetDepartingSurvival(*v)
	}
	if v := i.CollectiveCognition; v != nil {
		m.SetCollectiveCognition(*v)
	}
	if v := i.CurrentYear; v != nil {
		m.SetCurrentYear(*v)
	}
	if v := i.PopulationIDs; len(v) > 0 {
		m.AddPopulationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSettlementInput on the SettlementCreate builder.
func (c *SettlementCreate) SetInput(i CreateSettlementInput) *SettlementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSettlementInput represents a mutation input for updating settlements.
type UpdateSettlementInput struct {
	Owner               *string
	Name                *string
	SurvivalLimit       *int
	DepartingSurvival   *int
	CollectiveCognition *int
	CurrentYear         *int
	ClearPopulation     bool
	AddPopulationIDs    []int
	RemovePopulationIDs []int
}

// Mutate applies the UpdateSettlementInput on the SettlementMutation builder.
func (i *UpdateSettlementInput) Mutate(m *SettlementMutation) {
	if v := i.Owner; v != nil {
		m.SetOwner(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.SurvivalLimit; v != nil {
		m.SetSurvivalLimit(*v)
	}
	if v := i.DepartingSurvival; v != nil {
		m.SetDepartingSurvival(*v)
	}
	if v := i.CollectiveCognition; v != nil {
		m.SetCollectiveCognition(*v)
	}
	if v := i.CurrentYear; v != nil {
		m.SetCurrentYear(*v)
	}
	if i.ClearPopulation {
		m.ClearPopulation()
	}
	if v := i.AddPopulationIDs; len(v) > 0 {
		m.AddPopulationIDs(v...)
	}
	if v := i.RemovePopulationIDs; len(v) > 0 {
		m.RemovePopulationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdate builder.
func (c *SettlementUpdate) SetInput(i UpdateSettlementInput) *SettlementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSettlementInput on the SettlementUpdateOne builder.
func (c *SettlementUpdateOne) SetInput(i UpdateSettlementInput) *SettlementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSurvivorInput represents a mutation input for creating survivors.
type CreateSurvivorInput struct {
	Name             string
	Born             *int
	Gender           *survivor.Gender
	Huntxp           *int
	Survival         *int
	Movement         *int
	Accuracy         *int
	Strength         *int
	Evasion          *int
	Luck             *int
	Speed            *int
	Systemicpressure *int
	Torment          *int
	Insanity         *int
	Lumi             *int
	Courage          *int
	Understanding    *int
	SettlementID     *int
}

// Mutate applies the CreateSurvivorInput on the SurvivorMutation builder.
func (i *CreateSurvivorInput) Mutate(m *SurvivorMutation) {
	m.SetName(i.Name)
	if v := i.Born; v != nil {
		m.SetBorn(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.Huntxp; v != nil {
		m.SetHuntxp(*v)
	}
	if v := i.Survival; v != nil {
		m.SetSurvival(*v)
	}
	if v := i.Movement; v != nil {
		m.SetMovement(*v)
	}
	if v := i.Accuracy; v != nil {
		m.SetAccuracy(*v)
	}
	if v := i.Strength; v != nil {
		m.SetStrength(*v)
	}
	if v := i.Evasion; v != nil {
		m.SetEvasion(*v)
	}
	if v := i.Luck; v != nil {
		m.SetLuck(*v)
	}
	if v := i.Speed; v != nil {
		m.SetSpeed(*v)
	}
	if v := i.Systemicpressure; v != nil {
		m.SetSystemicpressure(*v)
	}
	if v := i.Torment; v != nil {
		m.SetTorment(*v)
	}
	if v := i.Insanity; v != nil {
		m.SetInsanity(*v)
	}
	if v := i.Lumi; v != nil {
		m.SetLumi(*v)
	}
	if v := i.Courage; v != nil {
		m.SetCourage(*v)
	}
	if v := i.Understanding; v != nil {
		m.SetUnderstanding(*v)
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
}

// SetInput applies the change-set in the CreateSurvivorInput on the SurvivorCreate builder.
func (c *SurvivorCreate) SetInput(i CreateSurvivorInput) *SurvivorCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSurvivorInput represents a mutation input for updating survivors.
type UpdateSurvivorInput struct {
	Name             *string
	Born             *int
	Gender           *survivor.Gender
	Huntxp           *int
	Survival         *int
	Movement         *int
	Accuracy         *int
	Strength         *int
	Evasion          *int
	Luck             *int
	Speed            *int
	Systemicpressure *int
	Torment          *int
	Insanity         *int
	Lumi             *int
	Courage          *int
	Understanding    *int
	ClearSettlement  bool
	SettlementID     *int
}

// Mutate applies the UpdateSurvivorInput on the SurvivorMutation builder.
func (i *UpdateSurvivorInput) Mutate(m *SurvivorMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Born; v != nil {
		m.SetBorn(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.Huntxp; v != nil {
		m.SetHuntxp(*v)
	}
	if v := i.Survival; v != nil {
		m.SetSurvival(*v)
	}
	if v := i.Movement; v != nil {
		m.SetMovement(*v)
	}
	if v := i.Accuracy; v != nil {
		m.SetAccuracy(*v)
	}
	if v := i.Strength; v != nil {
		m.SetStrength(*v)
	}
	if v := i.Evasion; v != nil {
		m.SetEvasion(*v)
	}
	if v := i.Luck; v != nil {
		m.SetLuck(*v)
	}
	if v := i.Speed; v != nil {
		m.SetSpeed(*v)
	}
	if v := i.Systemicpressure; v != nil {
		m.SetSystemicpressure(*v)
	}
	if v := i.Torment; v != nil {
		m.SetTorment(*v)
	}
	if v := i.Insanity; v != nil {
		m.SetInsanity(*v)
	}
	if v := i.Lumi; v != nil {
		m.SetLumi(*v)
	}
	if v := i.Courage; v != nil {
		m.SetCourage(*v)
	}
	if v := i.Understanding; v != nil {
		m.SetUnderstanding(*v)
	}
	if i.ClearSettlement {
		m.ClearSettlement()
	}
	if v := i.SettlementID; v != nil {
		m.SetSettlementID(*v)
	}
}

// SetInput applies the change-set in the UpdateSurvivorInput on the SurvivorUpdate builder.
func (c *SurvivorUpdate) SetInput(i UpdateSurvivorInput) *SurvivorUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSurvivorInput on the SurvivorUpdateOne builder.
func (c *SurvivorUpdateOne) SetInput(i UpdateSurvivorInput) *SurvivorUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
