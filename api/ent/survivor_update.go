// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/failuretoload/datamonster/ent/predicate"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// SurvivorUpdate is the builder for updating Survivor entities.
type SurvivorUpdate struct {
	config
	hooks    []Hook
	mutation *SurvivorMutation
}

// Where appends a list predicates to the SurvivorUpdate builder.
func (su *SurvivorUpdate) Where(ps ...predicate.Survivor) *SurvivorUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SurvivorUpdate) SetName(s string) *SurvivorUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableName(s *string) *SurvivorUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetBorn sets the "born" field.
func (su *SurvivorUpdate) SetBorn(i int) *SurvivorUpdate {
	su.mutation.ResetBorn()
	su.mutation.SetBorn(i)
	return su
}

// SetNillableBorn sets the "born" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableBorn(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetBorn(*i)
	}
	return su
}

// AddBorn adds i to the "born" field.
func (su *SurvivorUpdate) AddBorn(i int) *SurvivorUpdate {
	su.mutation.AddBorn(i)
	return su
}

// SetGender sets the "gender" field.
func (su *SurvivorUpdate) SetGender(s survivor.Gender) *SurvivorUpdate {
	su.mutation.SetGender(s)
	return su
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableGender(s *survivor.Gender) *SurvivorUpdate {
	if s != nil {
		su.SetGender(*s)
	}
	return su
}

// SetHuntxp sets the "huntxp" field.
func (su *SurvivorUpdate) SetHuntxp(i int) *SurvivorUpdate {
	su.mutation.ResetHuntxp()
	su.mutation.SetHuntxp(i)
	return su
}

// SetNillableHuntxp sets the "huntxp" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableHuntxp(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetHuntxp(*i)
	}
	return su
}

// AddHuntxp adds i to the "huntxp" field.
func (su *SurvivorUpdate) AddHuntxp(i int) *SurvivorUpdate {
	su.mutation.AddHuntxp(i)
	return su
}

// SetSurvival sets the "survival" field.
func (su *SurvivorUpdate) SetSurvival(i int) *SurvivorUpdate {
	su.mutation.ResetSurvival()
	su.mutation.SetSurvival(i)
	return su
}

// SetNillableSurvival sets the "survival" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableSurvival(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetSurvival(*i)
	}
	return su
}

// AddSurvival adds i to the "survival" field.
func (su *SurvivorUpdate) AddSurvival(i int) *SurvivorUpdate {
	su.mutation.AddSurvival(i)
	return su
}

// SetMovement sets the "movement" field.
func (su *SurvivorUpdate) SetMovement(i int) *SurvivorUpdate {
	su.mutation.ResetMovement()
	su.mutation.SetMovement(i)
	return su
}

// SetNillableMovement sets the "movement" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableMovement(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetMovement(*i)
	}
	return su
}

// AddMovement adds i to the "movement" field.
func (su *SurvivorUpdate) AddMovement(i int) *SurvivorUpdate {
	su.mutation.AddMovement(i)
	return su
}

// SetAccuracy sets the "accuracy" field.
func (su *SurvivorUpdate) SetAccuracy(i int) *SurvivorUpdate {
	su.mutation.ResetAccuracy()
	su.mutation.SetAccuracy(i)
	return su
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableAccuracy(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetAccuracy(*i)
	}
	return su
}

// AddAccuracy adds i to the "accuracy" field.
func (su *SurvivorUpdate) AddAccuracy(i int) *SurvivorUpdate {
	su.mutation.AddAccuracy(i)
	return su
}

// SetStrength sets the "strength" field.
func (su *SurvivorUpdate) SetStrength(i int) *SurvivorUpdate {
	su.mutation.ResetStrength()
	su.mutation.SetStrength(i)
	return su
}

// SetNillableStrength sets the "strength" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableStrength(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetStrength(*i)
	}
	return su
}

// AddStrength adds i to the "strength" field.
func (su *SurvivorUpdate) AddStrength(i int) *SurvivorUpdate {
	su.mutation.AddStrength(i)
	return su
}

// SetEvasion sets the "evasion" field.
func (su *SurvivorUpdate) SetEvasion(i int) *SurvivorUpdate {
	su.mutation.ResetEvasion()
	su.mutation.SetEvasion(i)
	return su
}

// SetNillableEvasion sets the "evasion" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableEvasion(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetEvasion(*i)
	}
	return su
}

// AddEvasion adds i to the "evasion" field.
func (su *SurvivorUpdate) AddEvasion(i int) *SurvivorUpdate {
	su.mutation.AddEvasion(i)
	return su
}

// SetLuck sets the "luck" field.
func (su *SurvivorUpdate) SetLuck(i int) *SurvivorUpdate {
	su.mutation.ResetLuck()
	su.mutation.SetLuck(i)
	return su
}

// SetNillableLuck sets the "luck" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableLuck(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetLuck(*i)
	}
	return su
}

// AddLuck adds i to the "luck" field.
func (su *SurvivorUpdate) AddLuck(i int) *SurvivorUpdate {
	su.mutation.AddLuck(i)
	return su
}

// SetSpeed sets the "speed" field.
func (su *SurvivorUpdate) SetSpeed(i int) *SurvivorUpdate {
	su.mutation.ResetSpeed()
	su.mutation.SetSpeed(i)
	return su
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableSpeed(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetSpeed(*i)
	}
	return su
}

// AddSpeed adds i to the "speed" field.
func (su *SurvivorUpdate) AddSpeed(i int) *SurvivorUpdate {
	su.mutation.AddSpeed(i)
	return su
}

// SetSystemicpressure sets the "systemicpressure" field.
func (su *SurvivorUpdate) SetSystemicpressure(i int) *SurvivorUpdate {
	su.mutation.ResetSystemicpressure()
	su.mutation.SetSystemicpressure(i)
	return su
}

// SetNillableSystemicpressure sets the "systemicpressure" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableSystemicpressure(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetSystemicpressure(*i)
	}
	return su
}

// AddSystemicpressure adds i to the "systemicpressure" field.
func (su *SurvivorUpdate) AddSystemicpressure(i int) *SurvivorUpdate {
	su.mutation.AddSystemicpressure(i)
	return su
}

// SetTorment sets the "torment" field.
func (su *SurvivorUpdate) SetTorment(i int) *SurvivorUpdate {
	su.mutation.ResetTorment()
	su.mutation.SetTorment(i)
	return su
}

// SetNillableTorment sets the "torment" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableTorment(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetTorment(*i)
	}
	return su
}

// AddTorment adds i to the "torment" field.
func (su *SurvivorUpdate) AddTorment(i int) *SurvivorUpdate {
	su.mutation.AddTorment(i)
	return su
}

// SetInsanity sets the "insanity" field.
func (su *SurvivorUpdate) SetInsanity(i int) *SurvivorUpdate {
	su.mutation.ResetInsanity()
	su.mutation.SetInsanity(i)
	return su
}

// SetNillableInsanity sets the "insanity" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableInsanity(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetInsanity(*i)
	}
	return su
}

// AddInsanity adds i to the "insanity" field.
func (su *SurvivorUpdate) AddInsanity(i int) *SurvivorUpdate {
	su.mutation.AddInsanity(i)
	return su
}

// SetLumi sets the "lumi" field.
func (su *SurvivorUpdate) SetLumi(i int) *SurvivorUpdate {
	su.mutation.ResetLumi()
	su.mutation.SetLumi(i)
	return su
}

// SetNillableLumi sets the "lumi" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableLumi(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetLumi(*i)
	}
	return su
}

// AddLumi adds i to the "lumi" field.
func (su *SurvivorUpdate) AddLumi(i int) *SurvivorUpdate {
	su.mutation.AddLumi(i)
	return su
}

// SetCourage sets the "courage" field.
func (su *SurvivorUpdate) SetCourage(i int) *SurvivorUpdate {
	su.mutation.ResetCourage()
	su.mutation.SetCourage(i)
	return su
}

// SetNillableCourage sets the "courage" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableCourage(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetCourage(*i)
	}
	return su
}

// AddCourage adds i to the "courage" field.
func (su *SurvivorUpdate) AddCourage(i int) *SurvivorUpdate {
	su.mutation.AddCourage(i)
	return su
}

// SetUnderstanding sets the "understanding" field.
func (su *SurvivorUpdate) SetUnderstanding(i int) *SurvivorUpdate {
	su.mutation.ResetUnderstanding()
	su.mutation.SetUnderstanding(i)
	return su
}

// SetNillableUnderstanding sets the "understanding" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableUnderstanding(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetUnderstanding(*i)
	}
	return su
}

// AddUnderstanding adds i to the "understanding" field.
func (su *SurvivorUpdate) AddUnderstanding(i int) *SurvivorUpdate {
	su.mutation.AddUnderstanding(i)
	return su
}

// SetSettlementID sets the "settlement_id" field.
func (su *SurvivorUpdate) SetSettlementID(i int) *SurvivorUpdate {
	su.mutation.SetSettlementID(i)
	return su
}

// SetNillableSettlementID sets the "settlement_id" field if the given value is not nil.
func (su *SurvivorUpdate) SetNillableSettlementID(i *int) *SurvivorUpdate {
	if i != nil {
		su.SetSettlementID(*i)
	}
	return su
}

// ClearSettlementID clears the value of the "settlement_id" field.
func (su *SurvivorUpdate) ClearSettlementID() *SurvivorUpdate {
	su.mutation.ClearSettlementID()
	return su
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (su *SurvivorUpdate) SetSettlement(s *Settlement) *SurvivorUpdate {
	return su.SetSettlementID(s.ID)
}

// Mutation returns the SurvivorMutation object of the builder.
func (su *SurvivorUpdate) Mutation() *SurvivorMutation {
	return su.mutation
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (su *SurvivorUpdate) ClearSettlement() *SurvivorUpdate {
	su.mutation.ClearSettlement()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SurvivorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SurvivorUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SurvivorUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SurvivorUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SurvivorUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := survivor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Survivor.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Born(); ok {
		if err := survivor.BornValidator(v); err != nil {
			return &ValidationError{Name: "born", err: fmt.Errorf(`ent: validator failed for field "Survivor.born": %w`, err)}
		}
	}
	if v, ok := su.mutation.Gender(); ok {
		if err := survivor.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Survivor.gender": %w`, err)}
		}
	}
	if v, ok := su.mutation.Huntxp(); ok {
		if err := survivor.HuntxpValidator(v); err != nil {
			return &ValidationError{Name: "huntxp", err: fmt.Errorf(`ent: validator failed for field "Survivor.huntxp": %w`, err)}
		}
	}
	if v, ok := su.mutation.Survival(); ok {
		if err := survivor.SurvivalValidator(v); err != nil {
			return &ValidationError{Name: "survival", err: fmt.Errorf(`ent: validator failed for field "Survivor.survival": %w`, err)}
		}
	}
	if v, ok := su.mutation.Movement(); ok {
		if err := survivor.MovementValidator(v); err != nil {
			return &ValidationError{Name: "movement", err: fmt.Errorf(`ent: validator failed for field "Survivor.movement": %w`, err)}
		}
	}
	if v, ok := su.mutation.Accuracy(); ok {
		if err := survivor.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf(`ent: validator failed for field "Survivor.accuracy": %w`, err)}
		}
	}
	if v, ok := su.mutation.Strength(); ok {
		if err := survivor.StrengthValidator(v); err != nil {
			return &ValidationError{Name: "strength", err: fmt.Errorf(`ent: validator failed for field "Survivor.strength": %w`, err)}
		}
	}
	if v, ok := su.mutation.Evasion(); ok {
		if err := survivor.EvasionValidator(v); err != nil {
			return &ValidationError{Name: "evasion", err: fmt.Errorf(`ent: validator failed for field "Survivor.evasion": %w`, err)}
		}
	}
	if v, ok := su.mutation.Luck(); ok {
		if err := survivor.LuckValidator(v); err != nil {
			return &ValidationError{Name: "luck", err: fmt.Errorf(`ent: validator failed for field "Survivor.luck": %w`, err)}
		}
	}
	if v, ok := su.mutation.Speed(); ok {
		if err := survivor.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "Survivor.speed": %w`, err)}
		}
	}
	if v, ok := su.mutation.Systemicpressure(); ok {
		if err := survivor.SystemicpressureValidator(v); err != nil {
			return &ValidationError{Name: "systemicpressure", err: fmt.Errorf(`ent: validator failed for field "Survivor.systemicpressure": %w`, err)}
		}
	}
	if v, ok := su.mutation.Torment(); ok {
		if err := survivor.TormentValidator(v); err != nil {
			return &ValidationError{Name: "torment", err: fmt.Errorf(`ent: validator failed for field "Survivor.torment": %w`, err)}
		}
	}
	if v, ok := su.mutation.Insanity(); ok {
		if err := survivor.InsanityValidator(v); err != nil {
			return &ValidationError{Name: "insanity", err: fmt.Errorf(`ent: validator failed for field "Survivor.insanity": %w`, err)}
		}
	}
	if v, ok := su.mutation.Lumi(); ok {
		if err := survivor.LumiValidator(v); err != nil {
			return &ValidationError{Name: "lumi", err: fmt.Errorf(`ent: validator failed for field "Survivor.lumi": %w`, err)}
		}
	}
	if v, ok := su.mutation.Courage(); ok {
		if err := survivor.CourageValidator(v); err != nil {
			return &ValidationError{Name: "courage", err: fmt.Errorf(`ent: validator failed for field "Survivor.courage": %w`, err)}
		}
	}
	if v, ok := su.mutation.Understanding(); ok {
		if err := survivor.UnderstandingValidator(v); err != nil {
			return &ValidationError{Name: "understanding", err: fmt.Errorf(`ent: validator failed for field "Survivor.understanding": %w`, err)}
		}
	}
	return nil
}

func (su *SurvivorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(survivor.Table, survivor.Columns, sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(survivor.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Born(); ok {
		_spec.SetField(survivor.FieldBorn, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedBorn(); ok {
		_spec.AddField(survivor.FieldBorn, field.TypeInt, value)
	}
	if value, ok := su.mutation.Gender(); ok {
		_spec.SetField(survivor.FieldGender, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Huntxp(); ok {
		_spec.SetField(survivor.FieldHuntxp, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedHuntxp(); ok {
		_spec.AddField(survivor.FieldHuntxp, field.TypeInt, value)
	}
	if value, ok := su.mutation.Survival(); ok {
		_spec.SetField(survivor.FieldSurvival, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSurvival(); ok {
		_spec.AddField(survivor.FieldSurvival, field.TypeInt, value)
	}
	if value, ok := su.mutation.Movement(); ok {
		_spec.SetField(survivor.FieldMovement, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedMovement(); ok {
		_spec.AddField(survivor.FieldMovement, field.TypeInt, value)
	}
	if value, ok := su.mutation.Accuracy(); ok {
		_spec.SetField(survivor.FieldAccuracy, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAccuracy(); ok {
		_spec.AddField(survivor.FieldAccuracy, field.TypeInt, value)
	}
	if value, ok := su.mutation.Strength(); ok {
		_spec.SetField(survivor.FieldStrength, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedStrength(); ok {
		_spec.AddField(survivor.FieldStrength, field.TypeInt, value)
	}
	if value, ok := su.mutation.Evasion(); ok {
		_spec.SetField(survivor.FieldEvasion, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedEvasion(); ok {
		_spec.AddField(survivor.FieldEvasion, field.TypeInt, value)
	}
	if value, ok := su.mutation.Luck(); ok {
		_spec.SetField(survivor.FieldLuck, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedLuck(); ok {
		_spec.AddField(survivor.FieldLuck, field.TypeInt, value)
	}
	if value, ok := su.mutation.Speed(); ok {
		_spec.SetField(survivor.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSpeed(); ok {
		_spec.AddField(survivor.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := su.mutation.Systemicpressure(); ok {
		_spec.SetField(survivor.FieldSystemicpressure, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSystemicpressure(); ok {
		_spec.AddField(survivor.FieldSystemicpressure, field.TypeInt, value)
	}
	if value, ok := su.mutation.Torment(); ok {
		_spec.SetField(survivor.FieldTorment, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTorment(); ok {
		_spec.AddField(survivor.FieldTorment, field.TypeInt, value)
	}
	if value, ok := su.mutation.Insanity(); ok {
		_spec.SetField(survivor.FieldInsanity, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedInsanity(); ok {
		_spec.AddField(survivor.FieldInsanity, field.TypeInt, value)
	}
	if value, ok := su.mutation.Lumi(); ok {
		_spec.SetField(survivor.FieldLumi, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedLumi(); ok {
		_spec.AddField(survivor.FieldLumi, field.TypeInt, value)
	}
	if value, ok := su.mutation.Courage(); ok {
		_spec.SetField(survivor.FieldCourage, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCourage(); ok {
		_spec.AddField(survivor.FieldCourage, field.TypeInt, value)
	}
	if value, ok := su.mutation.Understanding(); ok {
		_spec.SetField(survivor.FieldUnderstanding, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedUnderstanding(); ok {
		_spec.AddField(survivor.FieldUnderstanding, field.TypeInt, value)
	}
	if su.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survivor.SettlementTable,
			Columns: []string{survivor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survivor.SettlementTable,
			Columns: []string{survivor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survivor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SurvivorUpdateOne is the builder for updating a single Survivor entity.
type SurvivorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SurvivorMutation
}

// SetName sets the "name" field.
func (suo *SurvivorUpdateOne) SetName(s string) *SurvivorUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableName(s *string) *SurvivorUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetBorn sets the "born" field.
func (suo *SurvivorUpdateOne) SetBorn(i int) *SurvivorUpdateOne {
	suo.mutation.ResetBorn()
	suo.mutation.SetBorn(i)
	return suo
}

// SetNillableBorn sets the "born" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableBorn(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetBorn(*i)
	}
	return suo
}

// AddBorn adds i to the "born" field.
func (suo *SurvivorUpdateOne) AddBorn(i int) *SurvivorUpdateOne {
	suo.mutation.AddBorn(i)
	return suo
}

// SetGender sets the "gender" field.
func (suo *SurvivorUpdateOne) SetGender(s survivor.Gender) *SurvivorUpdateOne {
	suo.mutation.SetGender(s)
	return suo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableGender(s *survivor.Gender) *SurvivorUpdateOne {
	if s != nil {
		suo.SetGender(*s)
	}
	return suo
}

// SetHuntxp sets the "huntxp" field.
func (suo *SurvivorUpdateOne) SetHuntxp(i int) *SurvivorUpdateOne {
	suo.mutation.ResetHuntxp()
	suo.mutation.SetHuntxp(i)
	return suo
}

// SetNillableHuntxp sets the "huntxp" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableHuntxp(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetHuntxp(*i)
	}
	return suo
}

// AddHuntxp adds i to the "huntxp" field.
func (suo *SurvivorUpdateOne) AddHuntxp(i int) *SurvivorUpdateOne {
	suo.mutation.AddHuntxp(i)
	return suo
}

// SetSurvival sets the "survival" field.
func (suo *SurvivorUpdateOne) SetSurvival(i int) *SurvivorUpdateOne {
	suo.mutation.ResetSurvival()
	suo.mutation.SetSurvival(i)
	return suo
}

// SetNillableSurvival sets the "survival" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableSurvival(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetSurvival(*i)
	}
	return suo
}

// AddSurvival adds i to the "survival" field.
func (suo *SurvivorUpdateOne) AddSurvival(i int) *SurvivorUpdateOne {
	suo.mutation.AddSurvival(i)
	return suo
}

// SetMovement sets the "movement" field.
func (suo *SurvivorUpdateOne) SetMovement(i int) *SurvivorUpdateOne {
	suo.mutation.ResetMovement()
	suo.mutation.SetMovement(i)
	return suo
}

// SetNillableMovement sets the "movement" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableMovement(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetMovement(*i)
	}
	return suo
}

// AddMovement adds i to the "movement" field.
func (suo *SurvivorUpdateOne) AddMovement(i int) *SurvivorUpdateOne {
	suo.mutation.AddMovement(i)
	return suo
}

// SetAccuracy sets the "accuracy" field.
func (suo *SurvivorUpdateOne) SetAccuracy(i int) *SurvivorUpdateOne {
	suo.mutation.ResetAccuracy()
	suo.mutation.SetAccuracy(i)
	return suo
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableAccuracy(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetAccuracy(*i)
	}
	return suo
}

// AddAccuracy adds i to the "accuracy" field.
func (suo *SurvivorUpdateOne) AddAccuracy(i int) *SurvivorUpdateOne {
	suo.mutation.AddAccuracy(i)
	return suo
}

// SetStrength sets the "strength" field.
func (suo *SurvivorUpdateOne) SetStrength(i int) *SurvivorUpdateOne {
	suo.mutation.ResetStrength()
	suo.mutation.SetStrength(i)
	return suo
}

// SetNillableStrength sets the "strength" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableStrength(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetStrength(*i)
	}
	return suo
}

// AddStrength adds i to the "strength" field.
func (suo *SurvivorUpdateOne) AddStrength(i int) *SurvivorUpdateOne {
	suo.mutation.AddStrength(i)
	return suo
}

// SetEvasion sets the "evasion" field.
func (suo *SurvivorUpdateOne) SetEvasion(i int) *SurvivorUpdateOne {
	suo.mutation.ResetEvasion()
	suo.mutation.SetEvasion(i)
	return suo
}

// SetNillableEvasion sets the "evasion" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableEvasion(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetEvasion(*i)
	}
	return suo
}

// AddEvasion adds i to the "evasion" field.
func (suo *SurvivorUpdateOne) AddEvasion(i int) *SurvivorUpdateOne {
	suo.mutation.AddEvasion(i)
	return suo
}

// SetLuck sets the "luck" field.
func (suo *SurvivorUpdateOne) SetLuck(i int) *SurvivorUpdateOne {
	suo.mutation.ResetLuck()
	suo.mutation.SetLuck(i)
	return suo
}

// SetNillableLuck sets the "luck" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableLuck(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetLuck(*i)
	}
	return suo
}

// AddLuck adds i to the "luck" field.
func (suo *SurvivorUpdateOne) AddLuck(i int) *SurvivorUpdateOne {
	suo.mutation.AddLuck(i)
	return suo
}

// SetSpeed sets the "speed" field.
func (suo *SurvivorUpdateOne) SetSpeed(i int) *SurvivorUpdateOne {
	suo.mutation.ResetSpeed()
	suo.mutation.SetSpeed(i)
	return suo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableSpeed(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetSpeed(*i)
	}
	return suo
}

// AddSpeed adds i to the "speed" field.
func (suo *SurvivorUpdateOne) AddSpeed(i int) *SurvivorUpdateOne {
	suo.mutation.AddSpeed(i)
	return suo
}

// SetSystemicpressure sets the "systemicpressure" field.
func (suo *SurvivorUpdateOne) SetSystemicpressure(i int) *SurvivorUpdateOne {
	suo.mutation.ResetSystemicpressure()
	suo.mutation.SetSystemicpressure(i)
	return suo
}

// SetNillableSystemicpressure sets the "systemicpressure" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableSystemicpressure(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetSystemicpressure(*i)
	}
	return suo
}

// AddSystemicpressure adds i to the "systemicpressure" field.
func (suo *SurvivorUpdateOne) AddSystemicpressure(i int) *SurvivorUpdateOne {
	suo.mutation.AddSystemicpressure(i)
	return suo
}

// SetTorment sets the "torment" field.
func (suo *SurvivorUpdateOne) SetTorment(i int) *SurvivorUpdateOne {
	suo.mutation.ResetTorment()
	suo.mutation.SetTorment(i)
	return suo
}

// SetNillableTorment sets the "torment" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableTorment(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetTorment(*i)
	}
	return suo
}

// AddTorment adds i to the "torment" field.
func (suo *SurvivorUpdateOne) AddTorment(i int) *SurvivorUpdateOne {
	suo.mutation.AddTorment(i)
	return suo
}

// SetInsanity sets the "insanity" field.
func (suo *SurvivorUpdateOne) SetInsanity(i int) *SurvivorUpdateOne {
	suo.mutation.ResetInsanity()
	suo.mutation.SetInsanity(i)
	return suo
}

// SetNillableInsanity sets the "insanity" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableInsanity(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetInsanity(*i)
	}
	return suo
}

// AddInsanity adds i to the "insanity" field.
func (suo *SurvivorUpdateOne) AddInsanity(i int) *SurvivorUpdateOne {
	suo.mutation.AddInsanity(i)
	return suo
}

// SetLumi sets the "lumi" field.
func (suo *SurvivorUpdateOne) SetLumi(i int) *SurvivorUpdateOne {
	suo.mutation.ResetLumi()
	suo.mutation.SetLumi(i)
	return suo
}

// SetNillableLumi sets the "lumi" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableLumi(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetLumi(*i)
	}
	return suo
}

// AddLumi adds i to the "lumi" field.
func (suo *SurvivorUpdateOne) AddLumi(i int) *SurvivorUpdateOne {
	suo.mutation.AddLumi(i)
	return suo
}

// SetCourage sets the "courage" field.
func (suo *SurvivorUpdateOne) SetCourage(i int) *SurvivorUpdateOne {
	suo.mutation.ResetCourage()
	suo.mutation.SetCourage(i)
	return suo
}

// SetNillableCourage sets the "courage" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableCourage(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetCourage(*i)
	}
	return suo
}

// AddCourage adds i to the "courage" field.
func (suo *SurvivorUpdateOne) AddCourage(i int) *SurvivorUpdateOne {
	suo.mutation.AddCourage(i)
	return suo
}

// SetUnderstanding sets the "understanding" field.
func (suo *SurvivorUpdateOne) SetUnderstanding(i int) *SurvivorUpdateOne {
	suo.mutation.ResetUnderstanding()
	suo.mutation.SetUnderstanding(i)
	return suo
}

// SetNillableUnderstanding sets the "understanding" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableUnderstanding(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetUnderstanding(*i)
	}
	return suo
}

// AddUnderstanding adds i to the "understanding" field.
func (suo *SurvivorUpdateOne) AddUnderstanding(i int) *SurvivorUpdateOne {
	suo.mutation.AddUnderstanding(i)
	return suo
}

// SetSettlementID sets the "settlement_id" field.
func (suo *SurvivorUpdateOne) SetSettlementID(i int) *SurvivorUpdateOne {
	suo.mutation.SetSettlementID(i)
	return suo
}

// SetNillableSettlementID sets the "settlement_id" field if the given value is not nil.
func (suo *SurvivorUpdateOne) SetNillableSettlementID(i *int) *SurvivorUpdateOne {
	if i != nil {
		suo.SetSettlementID(*i)
	}
	return suo
}

// ClearSettlementID clears the value of the "settlement_id" field.
func (suo *SurvivorUpdateOne) ClearSettlementID() *SurvivorUpdateOne {
	suo.mutation.ClearSettlementID()
	return suo
}

// SetSettlement sets the "settlement" edge to the Settlement entity.
func (suo *SurvivorUpdateOne) SetSettlement(s *Settlement) *SurvivorUpdateOne {
	return suo.SetSettlementID(s.ID)
}

// Mutation returns the SurvivorMutation object of the builder.
func (suo *SurvivorUpdateOne) Mutation() *SurvivorMutation {
	return suo.mutation
}

// ClearSettlement clears the "settlement" edge to the Settlement entity.
func (suo *SurvivorUpdateOne) ClearSettlement() *SurvivorUpdateOne {
	suo.mutation.ClearSettlement()
	return suo
}

// Where appends a list predicates to the SurvivorUpdate builder.
func (suo *SurvivorUpdateOne) Where(ps ...predicate.Survivor) *SurvivorUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SurvivorUpdateOne) Select(field string, fields ...string) *SurvivorUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Survivor entity.
func (suo *SurvivorUpdateOne) Save(ctx context.Context) (*Survivor, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SurvivorUpdateOne) SaveX(ctx context.Context) *Survivor {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SurvivorUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SurvivorUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SurvivorUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := survivor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Survivor.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Born(); ok {
		if err := survivor.BornValidator(v); err != nil {
			return &ValidationError{Name: "born", err: fmt.Errorf(`ent: validator failed for field "Survivor.born": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Gender(); ok {
		if err := survivor.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Survivor.gender": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Huntxp(); ok {
		if err := survivor.HuntxpValidator(v); err != nil {
			return &ValidationError{Name: "huntxp", err: fmt.Errorf(`ent: validator failed for field "Survivor.huntxp": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Survival(); ok {
		if err := survivor.SurvivalValidator(v); err != nil {
			return &ValidationError{Name: "survival", err: fmt.Errorf(`ent: validator failed for field "Survivor.survival": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Movement(); ok {
		if err := survivor.MovementValidator(v); err != nil {
			return &ValidationError{Name: "movement", err: fmt.Errorf(`ent: validator failed for field "Survivor.movement": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Accuracy(); ok {
		if err := survivor.AccuracyValidator(v); err != nil {
			return &ValidationError{Name: "accuracy", err: fmt.Errorf(`ent: validator failed for field "Survivor.accuracy": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Strength(); ok {
		if err := survivor.StrengthValidator(v); err != nil {
			return &ValidationError{Name: "strength", err: fmt.Errorf(`ent: validator failed for field "Survivor.strength": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Evasion(); ok {
		if err := survivor.EvasionValidator(v); err != nil {
			return &ValidationError{Name: "evasion", err: fmt.Errorf(`ent: validator failed for field "Survivor.evasion": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Luck(); ok {
		if err := survivor.LuckValidator(v); err != nil {
			return &ValidationError{Name: "luck", err: fmt.Errorf(`ent: validator failed for field "Survivor.luck": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Speed(); ok {
		if err := survivor.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`ent: validator failed for field "Survivor.speed": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Systemicpressure(); ok {
		if err := survivor.SystemicpressureValidator(v); err != nil {
			return &ValidationError{Name: "systemicpressure", err: fmt.Errorf(`ent: validator failed for field "Survivor.systemicpressure": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Torment(); ok {
		if err := survivor.TormentValidator(v); err != nil {
			return &ValidationError{Name: "torment", err: fmt.Errorf(`ent: validator failed for field "Survivor.torment": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Insanity(); ok {
		if err := survivor.InsanityValidator(v); err != nil {
			return &ValidationError{Name: "insanity", err: fmt.Errorf(`ent: validator failed for field "Survivor.insanity": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Lumi(); ok {
		if err := survivor.LumiValidator(v); err != nil {
			return &ValidationError{Name: "lumi", err: fmt.Errorf(`ent: validator failed for field "Survivor.lumi": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Courage(); ok {
		if err := survivor.CourageValidator(v); err != nil {
			return &ValidationError{Name: "courage", err: fmt.Errorf(`ent: validator failed for field "Survivor.courage": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Understanding(); ok {
		if err := survivor.UnderstandingValidator(v); err != nil {
			return &ValidationError{Name: "understanding", err: fmt.Errorf(`ent: validator failed for field "Survivor.understanding": %w`, err)}
		}
	}
	return nil
}

func (suo *SurvivorUpdateOne) sqlSave(ctx context.Context) (_node *Survivor, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(survivor.Table, survivor.Columns, sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Survivor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, survivor.FieldID)
		for _, f := range fields {
			if !survivor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != survivor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(survivor.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Born(); ok {
		_spec.SetField(survivor.FieldBorn, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedBorn(); ok {
		_spec.AddField(survivor.FieldBorn, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Gender(); ok {
		_spec.SetField(survivor.FieldGender, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Huntxp(); ok {
		_spec.SetField(survivor.FieldHuntxp, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedHuntxp(); ok {
		_spec.AddField(survivor.FieldHuntxp, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Survival(); ok {
		_spec.SetField(survivor.FieldSurvival, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSurvival(); ok {
		_spec.AddField(survivor.FieldSurvival, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Movement(); ok {
		_spec.SetField(survivor.FieldMovement, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedMovement(); ok {
		_spec.AddField(survivor.FieldMovement, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Accuracy(); ok {
		_spec.SetField(survivor.FieldAccuracy, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAccuracy(); ok {
		_spec.AddField(survivor.FieldAccuracy, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Strength(); ok {
		_spec.SetField(survivor.FieldStrength, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedStrength(); ok {
		_spec.AddField(survivor.FieldStrength, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Evasion(); ok {
		_spec.SetField(survivor.FieldEvasion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedEvasion(); ok {
		_spec.AddField(survivor.FieldEvasion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Luck(); ok {
		_spec.SetField(survivor.FieldLuck, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedLuck(); ok {
		_spec.AddField(survivor.FieldLuck, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Speed(); ok {
		_spec.SetField(survivor.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSpeed(); ok {
		_spec.AddField(survivor.FieldSpeed, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Systemicpressure(); ok {
		_spec.SetField(survivor.FieldSystemicpressure, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSystemicpressure(); ok {
		_spec.AddField(survivor.FieldSystemicpressure, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Torment(); ok {
		_spec.SetField(survivor.FieldTorment, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTorment(); ok {
		_spec.AddField(survivor.FieldTorment, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Insanity(); ok {
		_spec.SetField(survivor.FieldInsanity, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedInsanity(); ok {
		_spec.AddField(survivor.FieldInsanity, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Lumi(); ok {
		_spec.SetField(survivor.FieldLumi, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedLumi(); ok {
		_spec.AddField(survivor.FieldLumi, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Courage(); ok {
		_spec.SetField(survivor.FieldCourage, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCourage(); ok {
		_spec.AddField(survivor.FieldCourage, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Understanding(); ok {
		_spec.SetField(survivor.FieldUnderstanding, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedUnderstanding(); ok {
		_spec.AddField(survivor.FieldUnderstanding, field.TypeInt, value)
	}
	if suo.mutation.SettlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survivor.SettlementTable,
			Columns: []string{survivor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SettlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survivor.SettlementTable,
			Columns: []string{survivor.SettlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Survivor{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survivor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
