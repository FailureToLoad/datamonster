// Code generated by ent, DO NOT EDIT.

package settlement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the settlement type in the database.
	Label = "settlement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSurvivalLimit holds the string denoting the survivallimit field in the database.
	FieldSurvivalLimit = "survival_limit"
	// FieldDepartingSurvival holds the string denoting the departingsurvival field in the database.
	FieldDepartingSurvival = "departing_survival"
	// FieldCollectiveCognition holds the string denoting the collectivecognition field in the database.
	FieldCollectiveCognition = "collective_cognition"
	// FieldCurrentYear holds the string denoting the currentyear field in the database.
	FieldCurrentYear = "current_year"
	// EdgePopulation holds the string denoting the population edge name in mutations.
	EdgePopulation = "population"
	// Table holds the table name of the settlement in the database.
	Table = "settlements"
	// PopulationTable is the table that holds the population relation/edge.
	PopulationTable = "survivors"
	// PopulationInverseTable is the table name for the Survivor entity.
	// It exists in this package in order to avoid circular dependency with the "survivor" package.
	PopulationInverseTable = "survivors"
	// PopulationColumn is the table column denoting the population relation/edge.
	PopulationColumn = "settlement_id"
)

// Columns holds all SQL columns for settlement fields.
var Columns = []string{
	FieldID,
	FieldOwner,
	FieldName,
	FieldSurvivalLimit,
	FieldDepartingSurvival,
	FieldCollectiveCognition,
	FieldCurrentYear,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultSurvivalLimit holds the default value on creation for the "survivalLimit" field.
	DefaultSurvivalLimit int
	// SurvivalLimitValidator is a validator for the "survivalLimit" field. It is called by the builders before save.
	SurvivalLimitValidator func(int) error
	// DefaultDepartingSurvival holds the default value on creation for the "departingSurvival" field.
	DefaultDepartingSurvival int
	// DepartingSurvivalValidator is a validator for the "departingSurvival" field. It is called by the builders before save.
	DepartingSurvivalValidator func(int) error
	// DefaultCollectiveCognition holds the default value on creation for the "collectiveCognition" field.
	DefaultCollectiveCognition int
	// CollectiveCognitionValidator is a validator for the "collectiveCognition" field. It is called by the builders before save.
	CollectiveCognitionValidator func(int) error
	// DefaultCurrentYear holds the default value on creation for the "currentYear" field.
	DefaultCurrentYear int
	// CurrentYearValidator is a validator for the "currentYear" field. It is called by the builders before save.
	CurrentYearValidator func(int) error
)

// OrderOption defines the ordering options for the Settlement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySurvivalLimit orders the results by the survivalLimit field.
func BySurvivalLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurvivalLimit, opts...).ToFunc()
}

// ByDepartingSurvival orders the results by the departingSurvival field.
func ByDepartingSurvival(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartingSurvival, opts...).ToFunc()
}

// ByCollectiveCognition orders the results by the collectiveCognition field.
func ByCollectiveCognition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectiveCognition, opts...).ToFunc()
}

// ByCurrentYear orders the results by the currentYear field.
func ByCurrentYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentYear, opts...).ToFunc()
}

// ByPopulationCount orders the results by population count.
func ByPopulationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPopulationStep(), opts...)
	}
}

// ByPopulation orders the results by population terms.
func ByPopulation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPopulationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPopulationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PopulationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PopulationTable, PopulationColumn),
	)
}
