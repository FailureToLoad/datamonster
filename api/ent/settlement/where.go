// Code generated by ent, DO NOT EDIT.

package settlement

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/failuretoload/datamonster/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldID, id))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldOwner, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldName, v))
}

// SurvivalLimit applies equality check predicate on the "survivalLimit" field. It's identical to SurvivalLimitEQ.
func SurvivalLimit(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldSurvivalLimit, v))
}

// DepartingSurvival applies equality check predicate on the "departingSurvival" field. It's identical to DepartingSurvivalEQ.
func DepartingSurvival(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldDepartingSurvival, v))
}

// CollectiveCognition applies equality check predicate on the "collectiveCognition" field. It's identical to CollectiveCognitionEQ.
func CollectiveCognition(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldCollectiveCognition, v))
}

// CurrentYear applies equality check predicate on the "currentYear" field. It's identical to CurrentYearEQ.
func CurrentYear(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldCurrentYear, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldContainsFold(FieldOwner, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Settlement {
	return predicate.Settlement(sql.FieldContainsFold(FieldName, v))
}

// SurvivalLimitEQ applies the EQ predicate on the "survivalLimit" field.
func SurvivalLimitEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldSurvivalLimit, v))
}

// SurvivalLimitNEQ applies the NEQ predicate on the "survivalLimit" field.
func SurvivalLimitNEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldSurvivalLimit, v))
}

// SurvivalLimitIn applies the In predicate on the "survivalLimit" field.
func SurvivalLimitIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldSurvivalLimit, vs...))
}

// SurvivalLimitNotIn applies the NotIn predicate on the "survivalLimit" field.
func SurvivalLimitNotIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldSurvivalLimit, vs...))
}

// SurvivalLimitGT applies the GT predicate on the "survivalLimit" field.
func SurvivalLimitGT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldSurvivalLimit, v))
}

// SurvivalLimitGTE applies the GTE predicate on the "survivalLimit" field.
func SurvivalLimitGTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldSurvivalLimit, v))
}

// SurvivalLimitLT applies the LT predicate on the "survivalLimit" field.
func SurvivalLimitLT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldSurvivalLimit, v))
}

// SurvivalLimitLTE applies the LTE predicate on the "survivalLimit" field.
func SurvivalLimitLTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldSurvivalLimit, v))
}

// DepartingSurvivalEQ applies the EQ predicate on the "departingSurvival" field.
func DepartingSurvivalEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldDepartingSurvival, v))
}

// DepartingSurvivalNEQ applies the NEQ predicate on the "departingSurvival" field.
func DepartingSurvivalNEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldDepartingSurvival, v))
}

// DepartingSurvivalIn applies the In predicate on the "departingSurvival" field.
func DepartingSurvivalIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldDepartingSurvival, vs...))
}

// DepartingSurvivalNotIn applies the NotIn predicate on the "departingSurvival" field.
func DepartingSurvivalNotIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldDepartingSurvival, vs...))
}

// DepartingSurvivalGT applies the GT predicate on the "departingSurvival" field.
func DepartingSurvivalGT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldDepartingSurvival, v))
}

// DepartingSurvivalGTE applies the GTE predicate on the "departingSurvival" field.
func DepartingSurvivalGTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldDepartingSurvival, v))
}

// DepartingSurvivalLT applies the LT predicate on the "departingSurvival" field.
func DepartingSurvivalLT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldDepartingSurvival, v))
}

// DepartingSurvivalLTE applies the LTE predicate on the "departingSurvival" field.
func DepartingSurvivalLTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldDepartingSurvival, v))
}

// CollectiveCognitionEQ applies the EQ predicate on the "collectiveCognition" field.
func CollectiveCognitionEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldCollectiveCognition, v))
}

// CollectiveCognitionNEQ applies the NEQ predicate on the "collectiveCognition" field.
func CollectiveCognitionNEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldCollectiveCognition, v))
}

// CollectiveCognitionIn applies the In predicate on the "collectiveCognition" field.
func CollectiveCognitionIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldCollectiveCognition, vs...))
}

// CollectiveCognitionNotIn applies the NotIn predicate on the "collectiveCognition" field.
func CollectiveCognitionNotIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldCollectiveCognition, vs...))
}

// CollectiveCognitionGT applies the GT predicate on the "collectiveCognition" field.
func CollectiveCognitionGT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldCollectiveCognition, v))
}

// CollectiveCognitionGTE applies the GTE predicate on the "collectiveCognition" field.
func CollectiveCognitionGTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldCollectiveCognition, v))
}

// CollectiveCognitionLT applies the LT predicate on the "collectiveCognition" field.
func CollectiveCognitionLT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldCollectiveCognition, v))
}

// CollectiveCognitionLTE applies the LTE predicate on the "collectiveCognition" field.
func CollectiveCognitionLTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldCollectiveCognition, v))
}

// CurrentYearEQ applies the EQ predicate on the "currentYear" field.
func CurrentYearEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldEQ(FieldCurrentYear, v))
}

// CurrentYearNEQ applies the NEQ predicate on the "currentYear" field.
func CurrentYearNEQ(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNEQ(FieldCurrentYear, v))
}

// CurrentYearIn applies the In predicate on the "currentYear" field.
func CurrentYearIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldIn(FieldCurrentYear, vs...))
}

// CurrentYearNotIn applies the NotIn predicate on the "currentYear" field.
func CurrentYearNotIn(vs ...int) predicate.Settlement {
	return predicate.Settlement(sql.FieldNotIn(FieldCurrentYear, vs...))
}

// CurrentYearGT applies the GT predicate on the "currentYear" field.
func CurrentYearGT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGT(FieldCurrentYear, v))
}

// CurrentYearGTE applies the GTE predicate on the "currentYear" field.
func CurrentYearGTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldGTE(FieldCurrentYear, v))
}

// CurrentYearLT applies the LT predicate on the "currentYear" field.
func CurrentYearLT(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLT(FieldCurrentYear, v))
}

// CurrentYearLTE applies the LTE predicate on the "currentYear" field.
func CurrentYearLTE(v int) predicate.Settlement {
	return predicate.Settlement(sql.FieldLTE(FieldCurrentYear, v))
}

// HasPopulation applies the HasEdge predicate on the "population" edge.
func HasPopulation() predicate.Settlement {
	return predicate.Settlement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PopulationTable, PopulationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPopulationWith applies the HasEdge predicate on the "population" edge with a given conditions (other predicates).
func HasPopulationWith(preds ...predicate.Survivor) predicate.Settlement {
	return predicate.Settlement(func(s *sql.Selector) {
		step := newPopulationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settlement) predicate.Settlement {
	return predicate.Settlement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settlement) predicate.Settlement {
	return predicate.Settlement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settlement) predicate.Settlement {
	return predicate.Settlement(sql.NotPredicates(p))
}
