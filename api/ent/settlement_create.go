// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// SettlementCreate is the builder for creating a Settlement entity.
type SettlementCreate struct {
	config
	mutation *SettlementMutation
	hooks    []Hook
}

// SetOwner sets the "owner" field.
func (sc *SettlementCreate) SetOwner(s string) *SettlementCreate {
	sc.mutation.SetOwner(s)
	return sc
}

// SetName sets the "name" field.
func (sc *SettlementCreate) SetName(s string) *SettlementCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetSurvivalLimit sets the "survivalLimit" field.
func (sc *SettlementCreate) SetSurvivalLimit(i int) *SettlementCreate {
	sc.mutation.SetSurvivalLimit(i)
	return sc
}

// SetNillableSurvivalLimit sets the "survivalLimit" field if the given value is not nil.
func (sc *SettlementCreate) SetNillableSurvivalLimit(i *int) *SettlementCreate {
	if i != nil {
		sc.SetSurvivalLimit(*i)
	}
	return sc
}

// SetDepartingSurvival sets the "departingSurvival" field.
func (sc *SettlementCreate) SetDepartingSurvival(i int) *SettlementCreate {
	sc.mutation.SetDepartingSurvival(i)
	return sc
}

// SetNillableDepartingSurvival sets the "departingSurvival" field if the given value is not nil.
func (sc *SettlementCreate) SetNillableDepartingSurvival(i *int) *SettlementCreate {
	if i != nil {
		sc.SetDepartingSurvival(*i)
	}
	return sc
}

// SetCollectiveCognition sets the "collectiveCognition" field.
func (sc *SettlementCreate) SetCollectiveCognition(i int) *SettlementCreate {
	sc.mutation.SetCollectiveCognition(i)
	return sc
}

// SetNillableCollectiveCognition sets the "collectiveCognition" field if the given value is not nil.
func (sc *SettlementCreate) SetNillableCollectiveCognition(i *int) *SettlementCreate {
	if i != nil {
		sc.SetCollectiveCognition(*i)
	}
	return sc
}

// SetCurrentYear sets the "currentYear" field.
func (sc *SettlementCreate) SetCurrentYear(i int) *SettlementCreate {
	sc.mutation.SetCurrentYear(i)
	return sc
}

// SetNillableCurrentYear sets the "currentYear" field if the given value is not nil.
func (sc *SettlementCreate) SetNillableCurrentYear(i *int) *SettlementCreate {
	if i != nil {
		sc.SetCurrentYear(*i)
	}
	return sc
}

// AddPopulationIDs adds the "population" edge to the Survivor entity by IDs.
func (sc *SettlementCreate) AddPopulationIDs(ids ...int) *SettlementCreate {
	sc.mutation.AddPopulationIDs(ids...)
	return sc
}

// AddPopulation adds the "population" edges to the Survivor entity.
func (sc *SettlementCreate) AddPopulation(s ...*Survivor) *SettlementCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddPopulationIDs(ids...)
}

// Mutation returns the SettlementMutation object of the builder.
func (sc *SettlementCreate) Mutation() *SettlementMutation {
	return sc.mutation
}

// Save creates the Settlement in the database.
func (sc *SettlementCreate) Save(ctx context.Context) (*Settlement, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettlementCreate) SaveX(ctx context.Context) *Settlement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettlementCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettlementCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettlementCreate) defaults() {
	if _, ok := sc.mutation.SurvivalLimit(); !ok {
		v := settlement.DefaultSurvivalLimit
		sc.mutation.SetSurvivalLimit(v)
	}
	if _, ok := sc.mutation.DepartingSurvival(); !ok {
		v := settlement.DefaultDepartingSurvival
		sc.mutation.SetDepartingSurvival(v)
	}
	if _, ok := sc.mutation.CollectiveCognition(); !ok {
		v := settlement.DefaultCollectiveCognition
		sc.mutation.SetCollectiveCognition(v)
	}
	if _, ok := sc.mutation.CurrentYear(); !ok {
		v := settlement.DefaultCurrentYear
		sc.mutation.SetCurrentYear(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettlementCreate) check() error {
	if _, ok := sc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Settlement.owner"`)}
	}
	if v, ok := sc.mutation.Owner(); ok {
		if err := settlement.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Settlement.owner": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Settlement.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := settlement.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Settlement.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SurvivalLimit(); !ok {
		return &ValidationError{Name: "survivalLimit", err: errors.New(`ent: missing required field "Settlement.survivalLimit"`)}
	}
	if v, ok := sc.mutation.SurvivalLimit(); ok {
		if err := settlement.SurvivalLimitValidator(v); err != nil {
			return &ValidationError{Name: "survivalLimit", err: fmt.Errorf(`ent: validator failed for field "Settlement.survivalLimit": %w`, err)}
		}
	}
	if _, ok := sc.mutation.DepartingSurvival(); !ok {
		return &ValidationError{Name: "departingSurvival", err: errors.New(`ent: missing required field "Settlement.departingSurvival"`)}
	}
	if v, ok := sc.mutation.DepartingSurvival(); ok {
		if err := settlement.DepartingSurvivalValidator(v); err != nil {
			return &ValidationError{Name: "departingSurvival", err: fmt.Errorf(`ent: validator failed for field "Settlement.departingSurvival": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CollectiveCognition(); !ok {
		return &ValidationError{Name: "collectiveCognition", err: errors.New(`ent: missing required field "Settlement.collectiveCognition"`)}
	}
	if v, ok := sc.mutation.CollectiveCognition(); ok {
		if err := settlement.CollectiveCognitionValidator(v); err != nil {
			return &ValidationError{Name: "collectiveCognition", err: fmt.Errorf(`ent: validator failed for field "Settlement.collectiveCognition": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CurrentYear(); !ok {
		return &ValidationError{Name: "currentYear", err: errors.New(`ent: missing required field "Settlement.currentYear"`)}
	}
	if v, ok := sc.mutation.CurrentYear(); ok {
		if err := settlement.CurrentYearValidator(v); err != nil {
			return &ValidationError{Name: "currentYear", err: fmt.Errorf(`ent: validator failed for field "Settlement.currentYear": %w`, err)}
		}
	}
	return nil
}

func (sc *SettlementCreate) sqlSave(ctx context.Context) (*Settlement, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SettlementCreate) createSpec() (*Settlement, *sqlgraph.CreateSpec) {
	var (
		_node = &Settlement{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(settlement.Table, sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Owner(); ok {
		_spec.SetField(settlement.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(settlement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.SurvivalLimit(); ok {
		_spec.SetField(settlement.FieldSurvivalLimit, field.TypeInt, value)
		_node.SurvivalLimit = value
	}
	if value, ok := sc.mutation.DepartingSurvival(); ok {
		_spec.SetField(settlement.FieldDepartingSurvival, field.TypeInt, value)
		_node.DepartingSurvival = value
	}
	if value, ok := sc.mutation.CollectiveCognition(); ok {
		_spec.SetField(settlement.FieldCollectiveCognition, field.TypeInt, value)
		_node.CollectiveCognition = value
	}
	if value, ok := sc.mutation.CurrentYear(); ok {
		_spec.SetField(settlement.FieldCurrentYear, field.TypeInt, value)
		_node.CurrentYear = value
	}
	if nodes := sc.mutation.PopulationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SettlementCreateBulk is the builder for creating many Settlement entities in bulk.
type SettlementCreateBulk struct {
	config
	err      error
	builders []*SettlementCreate
}

// Save creates the Settlement entities in the database.
func (scb *SettlementCreateBulk) Save(ctx context.Context) ([]*Settlement, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settlement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettlementCreateBulk) SaveX(ctx context.Context) []*Settlement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettlementCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettlementCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
