// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/failuretoload/datamonster/ent/settlement"
)

// Settlement is the model entity for the Settlement schema.
type Settlement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SurvivalLimit holds the value of the "survivalLimit" field.
	SurvivalLimit int `json:"survivalLimit,omitempty"`
	// DepartingSurvival holds the value of the "departingSurvival" field.
	DepartingSurvival int `json:"departingSurvival,omitempty"`
	// CollectiveCognition holds the value of the "collectiveCognition" field.
	CollectiveCognition int `json:"collectiveCognition,omitempty"`
	// CurrentYear holds the value of the "currentYear" field.
	CurrentYear int `json:"currentYear,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SettlementQuery when eager-loading is set.
	Edges        SettlementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SettlementEdges holds the relations/edges for other nodes in the graph.
type SettlementEdges struct {
	// Population holds the value of the population edge.
	Population []*Survivor `json:"population,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPopulation map[string][]*Survivor
}

// PopulationOrErr returns the Population value or an error if the edge
// was not loaded in eager-loading.
func (e SettlementEdges) PopulationOrErr() ([]*Survivor, error) {
	if e.loadedTypes[0] {
		return e.Population, nil
	}
	return nil, &NotLoadedError{edge: "population"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settlement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case settlement.FieldID, settlement.FieldSurvivalLimit, settlement.FieldDepartingSurvival, settlement.FieldCollectiveCognition, settlement.FieldCurrentYear:
			values[i] = new(sql.NullInt64)
		case settlement.FieldOwner, settlement.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settlement fields.
func (s *Settlement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settlement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case settlement.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				s.Owner = value.String
			}
		case settlement.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case settlement.FieldSurvivalLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field survivalLimit", values[i])
			} else if value.Valid {
				s.SurvivalLimit = int(value.Int64)
			}
		case settlement.FieldDepartingSurvival:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field departingSurvival", values[i])
			} else if value.Valid {
				s.DepartingSurvival = int(value.Int64)
			}
		case settlement.FieldCollectiveCognition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field collectiveCognition", values[i])
			} else if value.Valid {
				s.CollectiveCognition = int(value.Int64)
			}
		case settlement.FieldCurrentYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currentYear", values[i])
			} else if value.Valid {
				s.CurrentYear = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Settlement.
// This includes values selected through modifiers, order, etc.
func (s *Settlement) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPopulation queries the "population" edge of the Settlement entity.
func (s *Settlement) QueryPopulation() *SurvivorQuery {
	return NewSettlementClient(s.config).QueryPopulation(s)
}

// Update returns a builder for updating this Settlement.
// Note that you need to call Settlement.Unwrap() before calling this method if this Settlement
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Settlement) Update() *SettlementUpdateOne {
	return NewSettlementClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Settlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Settlement) Unwrap() *Settlement {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settlement is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Settlement) String() string {
	var builder strings.Builder
	builder.WriteString("Settlement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("owner=")
	builder.WriteString(s.Owner)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("survivalLimit=")
	builder.WriteString(fmt.Sprintf("%v", s.SurvivalLimit))
	builder.WriteString(", ")
	builder.WriteString("departingSurvival=")
	builder.WriteString(fmt.Sprintf("%v", s.DepartingSurvival))
	builder.WriteString(", ")
	builder.WriteString("collectiveCognition=")
	builder.WriteString(fmt.Sprintf("%v", s.CollectiveCognition))
	builder.WriteString(", ")
	builder.WriteString("currentYear=")
	builder.WriteString(fmt.Sprintf("%v", s.CurrentYear))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPopulation returns the Population named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Settlement) NamedPopulation(name string) ([]*Survivor, error) {
	if s.Edges.namedPopulation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedPopulation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Settlement) appendNamedPopulation(name string, edges ...*Survivor) {
	if s.Edges.namedPopulation == nil {
		s.Edges.namedPopulation = make(map[string][]*Survivor)
	}
	if len(edges) == 0 {
		s.Edges.namedPopulation[name] = []*Survivor{}
	} else {
		s.Edges.namedPopulation[name] = append(s.Edges.namedPopulation[name], edges...)
	}
}

// Settlements is a parsable slice of Settlement.
type Settlements []*Settlement
