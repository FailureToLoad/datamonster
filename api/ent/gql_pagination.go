// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// SettlementEdge is the edge representation of Settlement.
type SettlementEdge struct {
	Node   *Settlement `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// SettlementConnection is the connection containing edges to Settlement.
type SettlementConnection struct {
	Edges      []*SettlementEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *SettlementConnection) build(nodes []*Settlement, pager *settlementPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Settlement
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Settlement {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Settlement {
			return nodes[i]
		}
	}
	c.Edges = make([]*SettlementEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SettlementEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SettlementPaginateOption enables pagination customization.
type SettlementPaginateOption func(*settlementPager) error

// WithSettlementOrder configures pagination ordering.
func WithSettlementOrder(order *SettlementOrder) SettlementPaginateOption {
	if order == nil {
		order = DefaultSettlementOrder
	}
	o := *order
	return func(pager *settlementPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSettlementOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSettlementFilter configures pagination filter.
func WithSettlementFilter(filter func(*SettlementQuery) (*SettlementQuery, error)) SettlementPaginateOption {
	return func(pager *settlementPager) error {
		if filter == nil {
			return errors.New("SettlementQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type settlementPager struct {
	reverse bool
	order   *SettlementOrder
	filter  func(*SettlementQuery) (*SettlementQuery, error)
}

func newSettlementPager(opts []SettlementPaginateOption, reverse bool) (*settlementPager, error) {
	pager := &settlementPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSettlementOrder
	}
	return pager, nil
}

func (p *settlementPager) applyFilter(query *SettlementQuery) (*SettlementQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *settlementPager) toCursor(s *Settlement) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *settlementPager) applyCursors(query *SettlementQuery, after, before *Cursor) (*SettlementQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSettlementOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *settlementPager) applyOrder(query *SettlementQuery) *SettlementQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSettlementOrder.Field {
		query = query.Order(DefaultSettlementOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *settlementPager) orderExpr(query *SettlementQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSettlementOrder.Field {
			b.Comma().Ident(DefaultSettlementOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Settlement.
func (s *SettlementQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SettlementPaginateOption,
) (*SettlementConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSettlementPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SettlementConnection{Edges: []*SettlementEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := s.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// SettlementOrderFieldOwner orders Settlement by owner.
	SettlementOrderFieldOwner = &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.Owner, nil
		},
		column: settlement.FieldOwner,
		toTerm: settlement.ByOwner,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Owner,
			}
		},
	}
	// SettlementOrderFieldName orders Settlement by name.
	SettlementOrderFieldName = &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.Name, nil
		},
		column: settlement.FieldName,
		toTerm: settlement.ByName,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Name,
			}
		},
	}
	// SettlementOrderFieldSurvivalLimit orders Settlement by survivalLimit.
	SettlementOrderFieldSurvivalLimit = &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.SurvivalLimit, nil
		},
		column: settlement.FieldSurvivalLimit,
		toTerm: settlement.BySurvivalLimit,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.SurvivalLimit,
			}
		},
	}
	// SettlementOrderFieldDepartingSurvival orders Settlement by departingSurvival.
	SettlementOrderFieldDepartingSurvival = &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.DepartingSurvival, nil
		},
		column: settlement.FieldDepartingSurvival,
		toTerm: settlement.ByDepartingSurvival,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.DepartingSurvival,
			}
		},
	}
	// SettlementOrderFieldCollectiveCognition orders Settlement by collectiveCognition.
	SettlementOrderFieldCollectiveCognition = &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.CollectiveCognition, nil
		},
		column: settlement.FieldCollectiveCognition,
		toTerm: settlement.ByCollectiveCognition,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CollectiveCognition,
			}
		},
	}
	// SettlementOrderFieldCurrentYear orders Settlement by currentYear.
	SettlementOrderFieldCurrentYear = &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.CurrentYear, nil
		},
		column: settlement.FieldCurrentYear,
		toTerm: settlement.ByCurrentYear,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CurrentYear,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f SettlementOrderField) String() string {
	var str string
	switch f.column {
	case SettlementOrderFieldOwner.column:
		str = "OWNER"
	case SettlementOrderFieldName.column:
		str = "NAME"
	case SettlementOrderFieldSurvivalLimit.column:
		str = "SURVIVAL_LIMIT"
	case SettlementOrderFieldDepartingSurvival.column:
		str = "DEPARTING_SURVIVAL"
	case SettlementOrderFieldCollectiveCognition.column:
		str = "COLLECTIVE_COGNITION"
	case SettlementOrderFieldCurrentYear.column:
		str = "CURRENT_YEAR"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f SettlementOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *SettlementOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("SettlementOrderField %T must be a string", v)
	}
	switch str {
	case "OWNER":
		*f = *SettlementOrderFieldOwner
	case "NAME":
		*f = *SettlementOrderFieldName
	case "SURVIVAL_LIMIT":
		*f = *SettlementOrderFieldSurvivalLimit
	case "DEPARTING_SURVIVAL":
		*f = *SettlementOrderFieldDepartingSurvival
	case "COLLECTIVE_COGNITION":
		*f = *SettlementOrderFieldCollectiveCognition
	case "CURRENT_YEAR":
		*f = *SettlementOrderFieldCurrentYear
	default:
		return fmt.Errorf("%s is not a valid SettlementOrderField", str)
	}
	return nil
}

// SettlementOrderField defines the ordering field of Settlement.
type SettlementOrderField struct {
	// Value extracts the ordering value from the given Settlement.
	Value    func(*Settlement) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) settlement.OrderOption
	toCursor func(*Settlement) Cursor
}

// SettlementOrder defines the ordering of Settlement.
type SettlementOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *SettlementOrderField `json:"field"`
}

// DefaultSettlementOrder is the default ordering of Settlement.
var DefaultSettlementOrder = &SettlementOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SettlementOrderField{
		Value: func(s *Settlement) (ent.Value, error) {
			return s.ID, nil
		},
		column: settlement.FieldID,
		toTerm: settlement.ByID,
		toCursor: func(s *Settlement) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Settlement into SettlementEdge.
func (s *Settlement) ToEdge(order *SettlementOrder) *SettlementEdge {
	if order == nil {
		order = DefaultSettlementOrder
	}
	return &SettlementEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// SurvivorEdge is the edge representation of Survivor.
type SurvivorEdge struct {
	Node   *Survivor `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// SurvivorConnection is the connection containing edges to Survivor.
type SurvivorConnection struct {
	Edges      []*SurvivorEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *SurvivorConnection) build(nodes []*Survivor, pager *survivorPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Survivor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Survivor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Survivor {
			return nodes[i]
		}
	}
	c.Edges = make([]*SurvivorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SurvivorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SurvivorPaginateOption enables pagination customization.
type SurvivorPaginateOption func(*survivorPager) error

// WithSurvivorOrder configures pagination ordering.
func WithSurvivorOrder(order *SurvivorOrder) SurvivorPaginateOption {
	if order == nil {
		order = DefaultSurvivorOrder
	}
	o := *order
	return func(pager *survivorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSurvivorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSurvivorFilter configures pagination filter.
func WithSurvivorFilter(filter func(*SurvivorQuery) (*SurvivorQuery, error)) SurvivorPaginateOption {
	return func(pager *survivorPager) error {
		if filter == nil {
			return errors.New("SurvivorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type survivorPager struct {
	reverse bool
	order   *SurvivorOrder
	filter  func(*SurvivorQuery) (*SurvivorQuery, error)
}

func newSurvivorPager(opts []SurvivorPaginateOption, reverse bool) (*survivorPager, error) {
	pager := &survivorPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSurvivorOrder
	}
	return pager, nil
}

func (p *survivorPager) applyFilter(query *SurvivorQuery) (*SurvivorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *survivorPager) toCursor(s *Survivor) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *survivorPager) applyCursors(query *SurvivorQuery, after, before *Cursor) (*SurvivorQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSurvivorOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *survivorPager) applyOrder(query *SurvivorQuery) *SurvivorQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSurvivorOrder.Field {
		query = query.Order(DefaultSurvivorOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *survivorPager) orderExpr(query *SurvivorQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSurvivorOrder.Field {
			b.Comma().Ident(DefaultSurvivorOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Survivor.
func (s *SurvivorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SurvivorPaginateOption,
) (*SurvivorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSurvivorPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SurvivorConnection{Edges: []*SurvivorEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := s.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// SurvivorOrderFieldName orders Survivor by name.
	SurvivorOrderFieldName = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Name, nil
		},
		column: survivor.FieldName,
		toTerm: survivor.ByName,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Name,
			}
		},
	}
	// SurvivorOrderFieldBorn orders Survivor by born.
	SurvivorOrderFieldBorn = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Born, nil
		},
		column: survivor.FieldBorn,
		toTerm: survivor.ByBorn,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Born,
			}
		},
	}
	// SurvivorOrderFieldGender orders Survivor by gender.
	SurvivorOrderFieldGender = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Gender, nil
		},
		column: survivor.FieldGender,
		toTerm: survivor.ByGender,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Gender,
			}
		},
	}
	// SurvivorOrderFieldHuntxp orders Survivor by huntxp.
	SurvivorOrderFieldHuntxp = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Huntxp, nil
		},
		column: survivor.FieldHuntxp,
		toTerm: survivor.ByHuntxp,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Huntxp,
			}
		},
	}
	// SurvivorOrderFieldSurvival orders Survivor by survival.
	SurvivorOrderFieldSurvival = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Survival, nil
		},
		column: survivor.FieldSurvival,
		toTerm: survivor.BySurvival,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Survival,
			}
		},
	}
	// SurvivorOrderFieldMovement orders Survivor by movement.
	SurvivorOrderFieldMovement = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Movement, nil
		},
		column: survivor.FieldMovement,
		toTerm: survivor.ByMovement,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Movement,
			}
		},
	}
	// SurvivorOrderFieldAccuracy orders Survivor by accuracy.
	SurvivorOrderFieldAccuracy = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Accuracy, nil
		},
		column: survivor.FieldAccuracy,
		toTerm: survivor.ByAccuracy,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Accuracy,
			}
		},
	}
	// SurvivorOrderFieldStrength orders Survivor by strength.
	SurvivorOrderFieldStrength = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Strength, nil
		},
		column: survivor.FieldStrength,
		toTerm: survivor.ByStrength,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Strength,
			}
		},
	}
	// SurvivorOrderFieldEvasion orders Survivor by evasion.
	SurvivorOrderFieldEvasion = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Evasion, nil
		},
		column: survivor.FieldEvasion,
		toTerm: survivor.ByEvasion,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Evasion,
			}
		},
	}
	// SurvivorOrderFieldLuck orders Survivor by luck.
	SurvivorOrderFieldLuck = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Luck, nil
		},
		column: survivor.FieldLuck,
		toTerm: survivor.ByLuck,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Luck,
			}
		},
	}
	// SurvivorOrderFieldSpeed orders Survivor by speed.
	SurvivorOrderFieldSpeed = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Speed, nil
		},
		column: survivor.FieldSpeed,
		toTerm: survivor.BySpeed,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Speed,
			}
		},
	}
	// SurvivorOrderFieldSystemicpressure orders Survivor by systemicpressure.
	SurvivorOrderFieldSystemicpressure = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Systemicpressure, nil
		},
		column: survivor.FieldSystemicpressure,
		toTerm: survivor.BySystemicpressure,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Systemicpressure,
			}
		},
	}
	// SurvivorOrderFieldTorment orders Survivor by torment.
	SurvivorOrderFieldTorment = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Torment, nil
		},
		column: survivor.FieldTorment,
		toTerm: survivor.ByTorment,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Torment,
			}
		},
	}
	// SurvivorOrderFieldInsanity orders Survivor by insanity.
	SurvivorOrderFieldInsanity = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Insanity, nil
		},
		column: survivor.FieldInsanity,
		toTerm: survivor.ByInsanity,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Insanity,
			}
		},
	}
	// SurvivorOrderFieldLumi orders Survivor by lumi.
	SurvivorOrderFieldLumi = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Lumi, nil
		},
		column: survivor.FieldLumi,
		toTerm: survivor.ByLumi,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Lumi,
			}
		},
	}
	// SurvivorOrderFieldCourage orders Survivor by courage.
	SurvivorOrderFieldCourage = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Courage, nil
		},
		column: survivor.FieldCourage,
		toTerm: survivor.ByCourage,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Courage,
			}
		},
	}
	// SurvivorOrderFieldUnderstanding orders Survivor by understanding.
	SurvivorOrderFieldUnderstanding = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Understanding, nil
		},
		column: survivor.FieldUnderstanding,
		toTerm: survivor.ByUnderstanding,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Understanding,
			}
		},
	}
	// SurvivorOrderFieldStatus orders Survivor by status.
	SurvivorOrderFieldStatus = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.Status, nil
		},
		column: survivor.FieldStatus,
		toTerm: survivor.ByStatus,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Status,
			}
		},
	}
	// SurvivorOrderFieldStatusChangeYear orders Survivor by status_change_year.
	SurvivorOrderFieldStatusChangeYear = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.StatusChangeYear, nil
		},
		column: survivor.FieldStatusChangeYear,
		toTerm: survivor.ByStatusChangeYear,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.StatusChangeYear,
			}
		},
	}
	// SurvivorOrderFieldSettlementID orders Survivor by settlement_id.
	SurvivorOrderFieldSettlementID = &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.SettlementID, nil
		},
		column: survivor.FieldSettlementID,
		toTerm: survivor.BySettlementID,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.SettlementID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f SurvivorOrderField) String() string {
	var str string
	switch f.column {
	case SurvivorOrderFieldName.column:
		str = "NAME"
	case SurvivorOrderFieldBorn.column:
		str = "BORN"
	case SurvivorOrderFieldGender.column:
		str = "GENDER"
	case SurvivorOrderFieldHuntxp.column:
		str = "HUNTXP"
	case SurvivorOrderFieldSurvival.column:
		str = "SURVVAL"
	case SurvivorOrderFieldMovement.column:
		str = "MOVEMENT"
	case SurvivorOrderFieldAccuracy.column:
		str = "ACCURACY"
	case SurvivorOrderFieldStrength.column:
		str = "STRENGTH"
	case SurvivorOrderFieldEvasion.column:
		str = "EVASION"
	case SurvivorOrderFieldLuck.column:
		str = "LUCK"
	case SurvivorOrderFieldSpeed.column:
		str = "SPEED"
	case SurvivorOrderFieldSystemicpressure.column:
		str = "SYSTEMICPRESSURE"
	case SurvivorOrderFieldTorment.column:
		str = "TORMENT"
	case SurvivorOrderFieldInsanity.column:
		str = "INSANITY"
	case SurvivorOrderFieldLumi.column:
		str = "LUMI"
	case SurvivorOrderFieldCourage.column:
		str = "CURRENCY"
	case SurvivorOrderFieldUnderstanding.column:
		str = "UNDERSTANDING"
	case SurvivorOrderFieldStatus.column:
		str = "STATUS"
	case SurvivorOrderFieldStatusChangeYear.column:
		str = "STATUS_CHANGE_YEAR"
	case SurvivorOrderFieldSettlementID.column:
		str = "SETTLEMENTID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f SurvivorOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *SurvivorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("SurvivorOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *SurvivorOrderFieldName
	case "BORN":
		*f = *SurvivorOrderFieldBorn
	case "GENDER":
		*f = *SurvivorOrderFieldGender
	case "HUNTXP":
		*f = *SurvivorOrderFieldHuntxp
	case "SURVVAL":
		*f = *SurvivorOrderFieldSurvival
	case "MOVEMENT":
		*f = *SurvivorOrderFieldMovement
	case "ACCURACY":
		*f = *SurvivorOrderFieldAccuracy
	case "STRENGTH":
		*f = *SurvivorOrderFieldStrength
	case "EVASION":
		*f = *SurvivorOrderFieldEvasion
	case "LUCK":
		*f = *SurvivorOrderFieldLuck
	case "SPEED":
		*f = *SurvivorOrderFieldSpeed
	case "SYSTEMICPRESSURE":
		*f = *SurvivorOrderFieldSystemicpressure
	case "TORMENT":
		*f = *SurvivorOrderFieldTorment
	case "INSANITY":
		*f = *SurvivorOrderFieldInsanity
	case "LUMI":
		*f = *SurvivorOrderFieldLumi
	case "CURRENCY":
		*f = *SurvivorOrderFieldCourage
	case "UNDERSTANDING":
		*f = *SurvivorOrderFieldUnderstanding
	case "STATUS":
		*f = *SurvivorOrderFieldStatus
	case "STATUS_CHANGE_YEAR":
		*f = *SurvivorOrderFieldStatusChangeYear
	case "SETTLEMENTID":
		*f = *SurvivorOrderFieldSettlementID
	default:
		return fmt.Errorf("%s is not a valid SurvivorOrderField", str)
	}
	return nil
}

// SurvivorOrderField defines the ordering field of Survivor.
type SurvivorOrderField struct {
	// Value extracts the ordering value from the given Survivor.
	Value    func(*Survivor) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) survivor.OrderOption
	toCursor func(*Survivor) Cursor
}

// SurvivorOrder defines the ordering of Survivor.
type SurvivorOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *SurvivorOrderField `json:"field"`
}

// DefaultSurvivorOrder is the default ordering of Survivor.
var DefaultSurvivorOrder = &SurvivorOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SurvivorOrderField{
		Value: func(s *Survivor) (ent.Value, error) {
			return s.ID, nil
		},
		column: survivor.FieldID,
		toTerm: survivor.ByID,
		toCursor: func(s *Survivor) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Survivor into SurvivorEdge.
func (s *Survivor) ToEdge(order *SurvivorOrder) *SurvivorEdge {
	if order == nil {
		order = DefaultSurvivorOrder
	}
	return &SurvivorEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}
