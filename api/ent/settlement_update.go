// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/failuretoload/datamonster/ent/predicate"
	"github.com/failuretoload/datamonster/ent/settlement"
	"github.com/failuretoload/datamonster/ent/survivor"
)

// SettlementUpdate is the builder for updating Settlement entities.
type SettlementUpdate struct {
	config
	hooks    []Hook
	mutation *SettlementMutation
}

// Where appends a list predicates to the SettlementUpdate builder.
func (su *SettlementUpdate) Where(ps ...predicate.Settlement) *SettlementUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetOwner sets the "owner" field.
func (su *SettlementUpdate) SetOwner(s string) *SettlementUpdate {
	su.mutation.SetOwner(s)
	return su
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableOwner(s *string) *SettlementUpdate {
	if s != nil {
		su.SetOwner(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *SettlementUpdate) SetName(s string) *SettlementUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableName(s *string) *SettlementUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetSurvivalLimit sets the "survivalLimit" field.
func (su *SettlementUpdate) SetSurvivalLimit(i int) *SettlementUpdate {
	su.mutation.ResetSurvivalLimit()
	su.mutation.SetSurvivalLimit(i)
	return su
}

// SetNillableSurvivalLimit sets the "survivalLimit" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableSurvivalLimit(i *int) *SettlementUpdate {
	if i != nil {
		su.SetSurvivalLimit(*i)
	}
	return su
}

// AddSurvivalLimit adds i to the "survivalLimit" field.
func (su *SettlementUpdate) AddSurvivalLimit(i int) *SettlementUpdate {
	su.mutation.AddSurvivalLimit(i)
	return su
}

// SetDepartingSurvival sets the "departingSurvival" field.
func (su *SettlementUpdate) SetDepartingSurvival(i int) *SettlementUpdate {
	su.mutation.ResetDepartingSurvival()
	su.mutation.SetDepartingSurvival(i)
	return su
}

// SetNillableDepartingSurvival sets the "departingSurvival" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableDepartingSurvival(i *int) *SettlementUpdate {
	if i != nil {
		su.SetDepartingSurvival(*i)
	}
	return su
}

// AddDepartingSurvival adds i to the "departingSurvival" field.
func (su *SettlementUpdate) AddDepartingSurvival(i int) *SettlementUpdate {
	su.mutation.AddDepartingSurvival(i)
	return su
}

// SetCollectiveCognition sets the "collectiveCognition" field.
func (su *SettlementUpdate) SetCollectiveCognition(i int) *SettlementUpdate {
	su.mutation.ResetCollectiveCognition()
	su.mutation.SetCollectiveCognition(i)
	return su
}

// SetNillableCollectiveCognition sets the "collectiveCognition" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableCollectiveCognition(i *int) *SettlementUpdate {
	if i != nil {
		su.SetCollectiveCognition(*i)
	}
	return su
}

// AddCollectiveCognition adds i to the "collectiveCognition" field.
func (su *SettlementUpdate) AddCollectiveCognition(i int) *SettlementUpdate {
	su.mutation.AddCollectiveCognition(i)
	return su
}

// SetCurrentYear sets the "currentYear" field.
func (su *SettlementUpdate) SetCurrentYear(i int) *SettlementUpdate {
	su.mutation.ResetCurrentYear()
	su.mutation.SetCurrentYear(i)
	return su
}

// SetNillableCurrentYear sets the "currentYear" field if the given value is not nil.
func (su *SettlementUpdate) SetNillableCurrentYear(i *int) *SettlementUpdate {
	if i != nil {
		su.SetCurrentYear(*i)
	}
	return su
}

// AddCurrentYear adds i to the "currentYear" field.
func (su *SettlementUpdate) AddCurrentYear(i int) *SettlementUpdate {
	su.mutation.AddCurrentYear(i)
	return su
}

// AddPopulationIDs adds the "population" edge to the Survivor entity by IDs.
func (su *SettlementUpdate) AddPopulationIDs(ids ...int) *SettlementUpdate {
	su.mutation.AddPopulationIDs(ids...)
	return su
}

// AddPopulation adds the "population" edges to the Survivor entity.
func (su *SettlementUpdate) AddPopulation(s ...*Survivor) *SettlementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddPopulationIDs(ids...)
}

// Mutation returns the SettlementMutation object of the builder.
func (su *SettlementUpdate) Mutation() *SettlementMutation {
	return su.mutation
}

// ClearPopulation clears all "population" edges to the Survivor entity.
func (su *SettlementUpdate) ClearPopulation() *SettlementUpdate {
	su.mutation.ClearPopulation()
	return su
}

// RemovePopulationIDs removes the "population" edge to Survivor entities by IDs.
func (su *SettlementUpdate) RemovePopulationIDs(ids ...int) *SettlementUpdate {
	su.mutation.RemovePopulationIDs(ids...)
	return su
}

// RemovePopulation removes "population" edges to Survivor entities.
func (su *SettlementUpdate) RemovePopulation(s ...*Survivor) *SettlementUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemovePopulationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettlementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettlementUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettlementUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettlementUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SettlementUpdate) check() error {
	if v, ok := su.mutation.Owner(); ok {
		if err := settlement.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Settlement.owner": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := settlement.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Settlement.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.SurvivalLimit(); ok {
		if err := settlement.SurvivalLimitValidator(v); err != nil {
			return &ValidationError{Name: "survivalLimit", err: fmt.Errorf(`ent: validator failed for field "Settlement.survivalLimit": %w`, err)}
		}
	}
	if v, ok := su.mutation.DepartingSurvival(); ok {
		if err := settlement.DepartingSurvivalValidator(v); err != nil {
			return &ValidationError{Name: "departingSurvival", err: fmt.Errorf(`ent: validator failed for field "Settlement.departingSurvival": %w`, err)}
		}
	}
	if v, ok := su.mutation.CollectiveCognition(); ok {
		if err := settlement.CollectiveCognitionValidator(v); err != nil {
			return &ValidationError{Name: "collectiveCognition", err: fmt.Errorf(`ent: validator failed for field "Settlement.collectiveCognition": %w`, err)}
		}
	}
	if v, ok := su.mutation.CurrentYear(); ok {
		if err := settlement.CurrentYearValidator(v); err != nil {
			return &ValidationError{Name: "currentYear", err: fmt.Errorf(`ent: validator failed for field "Settlement.currentYear": %w`, err)}
		}
	}
	return nil
}

func (su *SettlementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(settlement.Table, settlement.Columns, sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Owner(); ok {
		_spec.SetField(settlement.FieldOwner, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(settlement.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.SurvivalLimit(); ok {
		_spec.SetField(settlement.FieldSurvivalLimit, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSurvivalLimit(); ok {
		_spec.AddField(settlement.FieldSurvivalLimit, field.TypeInt, value)
	}
	if value, ok := su.mutation.DepartingSurvival(); ok {
		_spec.SetField(settlement.FieldDepartingSurvival, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDepartingSurvival(); ok {
		_spec.AddField(settlement.FieldDepartingSurvival, field.TypeInt, value)
	}
	if value, ok := su.mutation.CollectiveCognition(); ok {
		_spec.SetField(settlement.FieldCollectiveCognition, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCollectiveCognition(); ok {
		_spec.AddField(settlement.FieldCollectiveCognition, field.TypeInt, value)
	}
	if value, ok := su.mutation.CurrentYear(); ok {
		_spec.SetField(settlement.FieldCurrentYear, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCurrentYear(); ok {
		_spec.AddField(settlement.FieldCurrentYear, field.TypeInt, value)
	}
	if su.mutation.PopulationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPopulationIDs(); len(nodes) > 0 && !su.mutation.PopulationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PopulationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SettlementUpdateOne is the builder for updating a single Settlement entity.
type SettlementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettlementMutation
}

// SetOwner sets the "owner" field.
func (suo *SettlementUpdateOne) SetOwner(s string) *SettlementUpdateOne {
	suo.mutation.SetOwner(s)
	return suo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableOwner(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetOwner(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SettlementUpdateOne) SetName(s string) *SettlementUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableName(s *string) *SettlementUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetSurvivalLimit sets the "survivalLimit" field.
func (suo *SettlementUpdateOne) SetSurvivalLimit(i int) *SettlementUpdateOne {
	suo.mutation.ResetSurvivalLimit()
	suo.mutation.SetSurvivalLimit(i)
	return suo
}

// SetNillableSurvivalLimit sets the "survivalLimit" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableSurvivalLimit(i *int) *SettlementUpdateOne {
	if i != nil {
		suo.SetSurvivalLimit(*i)
	}
	return suo
}

// AddSurvivalLimit adds i to the "survivalLimit" field.
func (suo *SettlementUpdateOne) AddSurvivalLimit(i int) *SettlementUpdateOne {
	suo.mutation.AddSurvivalLimit(i)
	return suo
}

// SetDepartingSurvival sets the "departingSurvival" field.
func (suo *SettlementUpdateOne) SetDepartingSurvival(i int) *SettlementUpdateOne {
	suo.mutation.ResetDepartingSurvival()
	suo.mutation.SetDepartingSurvival(i)
	return suo
}

// SetNillableDepartingSurvival sets the "departingSurvival" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableDepartingSurvival(i *int) *SettlementUpdateOne {
	if i != nil {
		suo.SetDepartingSurvival(*i)
	}
	return suo
}

// AddDepartingSurvival adds i to the "departingSurvival" field.
func (suo *SettlementUpdateOne) AddDepartingSurvival(i int) *SettlementUpdateOne {
	suo.mutation.AddDepartingSurvival(i)
	return suo
}

// SetCollectiveCognition sets the "collectiveCognition" field.
func (suo *SettlementUpdateOne) SetCollectiveCognition(i int) *SettlementUpdateOne {
	suo.mutation.ResetCollectiveCognition()
	suo.mutation.SetCollectiveCognition(i)
	return suo
}

// SetNillableCollectiveCognition sets the "collectiveCognition" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableCollectiveCognition(i *int) *SettlementUpdateOne {
	if i != nil {
		suo.SetCollectiveCognition(*i)
	}
	return suo
}

// AddCollectiveCognition adds i to the "collectiveCognition" field.
func (suo *SettlementUpdateOne) AddCollectiveCognition(i int) *SettlementUpdateOne {
	suo.mutation.AddCollectiveCognition(i)
	return suo
}

// SetCurrentYear sets the "currentYear" field.
func (suo *SettlementUpdateOne) SetCurrentYear(i int) *SettlementUpdateOne {
	suo.mutation.ResetCurrentYear()
	suo.mutation.SetCurrentYear(i)
	return suo
}

// SetNillableCurrentYear sets the "currentYear" field if the given value is not nil.
func (suo *SettlementUpdateOne) SetNillableCurrentYear(i *int) *SettlementUpdateOne {
	if i != nil {
		suo.SetCurrentYear(*i)
	}
	return suo
}

// AddCurrentYear adds i to the "currentYear" field.
func (suo *SettlementUpdateOne) AddCurrentYear(i int) *SettlementUpdateOne {
	suo.mutation.AddCurrentYear(i)
	return suo
}

// AddPopulationIDs adds the "population" edge to the Survivor entity by IDs.
func (suo *SettlementUpdateOne) AddPopulationIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.AddPopulationIDs(ids...)
	return suo
}

// AddPopulation adds the "population" edges to the Survivor entity.
func (suo *SettlementUpdateOne) AddPopulation(s ...*Survivor) *SettlementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddPopulationIDs(ids...)
}

// Mutation returns the SettlementMutation object of the builder.
func (suo *SettlementUpdateOne) Mutation() *SettlementMutation {
	return suo.mutation
}

// ClearPopulation clears all "population" edges to the Survivor entity.
func (suo *SettlementUpdateOne) ClearPopulation() *SettlementUpdateOne {
	suo.mutation.ClearPopulation()
	return suo
}

// RemovePopulationIDs removes the "population" edge to Survivor entities by IDs.
func (suo *SettlementUpdateOne) RemovePopulationIDs(ids ...int) *SettlementUpdateOne {
	suo.mutation.RemovePopulationIDs(ids...)
	return suo
}

// RemovePopulation removes "population" edges to Survivor entities.
func (suo *SettlementUpdateOne) RemovePopulation(s ...*Survivor) *SettlementUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemovePopulationIDs(ids...)
}

// Where appends a list predicates to the SettlementUpdate builder.
func (suo *SettlementUpdateOne) Where(ps ...predicate.Settlement) *SettlementUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettlementUpdateOne) Select(field string, fields ...string) *SettlementUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Settlement entity.
func (suo *SettlementUpdateOne) Save(ctx context.Context) (*Settlement, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettlementUpdateOne) SaveX(ctx context.Context) *Settlement {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettlementUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettlementUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SettlementUpdateOne) check() error {
	if v, ok := suo.mutation.Owner(); ok {
		if err := settlement.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Settlement.owner": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := settlement.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Settlement.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.SurvivalLimit(); ok {
		if err := settlement.SurvivalLimitValidator(v); err != nil {
			return &ValidationError{Name: "survivalLimit", err: fmt.Errorf(`ent: validator failed for field "Settlement.survivalLimit": %w`, err)}
		}
	}
	if v, ok := suo.mutation.DepartingSurvival(); ok {
		if err := settlement.DepartingSurvivalValidator(v); err != nil {
			return &ValidationError{Name: "departingSurvival", err: fmt.Errorf(`ent: validator failed for field "Settlement.departingSurvival": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CollectiveCognition(); ok {
		if err := settlement.CollectiveCognitionValidator(v); err != nil {
			return &ValidationError{Name: "collectiveCognition", err: fmt.Errorf(`ent: validator failed for field "Settlement.collectiveCognition": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CurrentYear(); ok {
		if err := settlement.CurrentYearValidator(v); err != nil {
			return &ValidationError{Name: "currentYear", err: fmt.Errorf(`ent: validator failed for field "Settlement.currentYear": %w`, err)}
		}
	}
	return nil
}

func (suo *SettlementUpdateOne) sqlSave(ctx context.Context) (_node *Settlement, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(settlement.Table, settlement.Columns, sqlgraph.NewFieldSpec(settlement.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settlement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settlement.FieldID)
		for _, f := range fields {
			if !settlement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Owner(); ok {
		_spec.SetField(settlement.FieldOwner, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(settlement.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.SurvivalLimit(); ok {
		_spec.SetField(settlement.FieldSurvivalLimit, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSurvivalLimit(); ok {
		_spec.AddField(settlement.FieldSurvivalLimit, field.TypeInt, value)
	}
	if value, ok := suo.mutation.DepartingSurvival(); ok {
		_spec.SetField(settlement.FieldDepartingSurvival, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDepartingSurvival(); ok {
		_spec.AddField(settlement.FieldDepartingSurvival, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CollectiveCognition(); ok {
		_spec.SetField(settlement.FieldCollectiveCognition, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCollectiveCognition(); ok {
		_spec.AddField(settlement.FieldCollectiveCognition, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CurrentYear(); ok {
		_spec.SetField(settlement.FieldCurrentYear, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCurrentYear(); ok {
		_spec.AddField(settlement.FieldCurrentYear, field.TypeInt, value)
	}
	if suo.mutation.PopulationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPopulationIDs(); len(nodes) > 0 && !suo.mutation.PopulationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PopulationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   settlement.PopulationTable,
			Columns: []string{settlement.PopulationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survivor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Settlement{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
